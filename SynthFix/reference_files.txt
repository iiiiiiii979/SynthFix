function Function ( ) { node. socket. close ( ) ; }
function Function ( name ) { return _ ( name_to_model [ name. toLowerCase ( ) ] || [ ] ). clone ( ) ; }
function Function ( ) { this. save ( { completed :! this. get ( "completed" ) } ) ; window. app. Todos. trigger ('reset' ) ; }
function Function ( ) { return "debugger;" }
function Function ( stream_id ) { Log ( 'debug', 'Playing recorded' ) ; mixpanel. track ( 'play-recorded' ) ; init_player ( { provider : 'rtmp', netConnectionUrl : 'rt
function onKeyup Function ( event ) { if ( event. which === 13 ) { event. preventDefault ( ) ; this. submit ( ) ; } }
function Function ( err, obj ) { assert. isNull ( err ) ; assert. equal ( obj. id, 'user/marak/haibu' ) ; assert. equal ( obj. name, 'haibu' ) ; assert
function Function ( enabled, opt_callback ) { var paramObject = { 'enabled' : enabled, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Timeline.setIncludeMemoryDetails', paramObject,
function Function ( ) { _advanceYear_MYP ( - 1 ) ; self. _instInputFocus_MYP ( inst ) ; }
function Function ( ) { return this. get ( 'admins' )!= null ; }
function Function ( ) { selfPoint. _emitter. setPositionType ( cc. CCPARTICLE_TYPE_FREE ) ; selfPoint. _relativeMovementButton. setVisible ( false ) ; selfPoint. _freeMovement
function Function ( error, item ) { if ( error ) { that. error ( error ) ; } that. update ( item ) ; callback ( ) ; }
function Function ( ) { this. options. bubbles. at ( 0 ). btapp. get ( 'torrent' ). off ( 'add', this. on_torrent, this ) ; this. torrent ( ) ;
function isArray Function ( arrlike ) { if ( Array. isArray ) { return Array. isArray ( arrlike ) ; } return Object. prototype. toString. call ( arrlike ) === '[object Array]' ; }
function Function ( path, base ) { if ( path. indexOf ( '/base' ) == 0 ) path = path. slice ( 1 ) ; return Path. resolve ( base, path ) ; }
function Function ( path ) { path = _path. resolve ( _path. dirname ( module. parent. filename ), path ) ; _fs. writeFileSync ( _path. join ( path, '/.hiddenFile.js'
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Network.enable', paramObject, opt_callback ) ; }
function Function ( ) { console. log ('successful post' ) ; }
function Function ( ) { var result = _testWindow. brackets. test. ProjectManager. openProject ( path ) ; result. done ( function ( ) { isReady = true ; } ) ; }
function Function ( ) { cc. log ( "do something" ) }
function Function ( e ) { this. init ( e ) ; var instance = this ; $ ( window ). resize ( function ( ) { instance. init ( ) ; } ) ; }
function Function ( ) { var sel = $ ( this ) ; if ( sel. hasClass ( 'wiki-l10n' ) ) { location. href = sel. val ( ) ; } else { this. form.
function Function ( ) { if (! this. rest ) { return 1 ; } else { return 1 + this. rest. length ( ) ; } }
function showRegistrationInfo Function ( info ) { dom. setInner ( "#email", info. email ) ; if ( info. returnTo ) { dom. setInner ( ".website", info. returnTo ) ; update
function Function ( ) { this. config. get ( "onClose" ) ( ) ; }
function Function ( touches, event ) { if (! this. isMouseDown ) { this. _beginPos = touches [ 0 ]. locationInView ( ). y ; } this. isMouseDown = true ; }
function Function ( ) { animationController. play ( ) ; animReverse. set ( 'checked', false ) ; animPause. set ( 'checked', false ) ; animPlay. set ( 'checked', true ) ;
function Function ( ) { resetBtn. css ( 'display', 'inline-block' ) ; stdin. css ( 'height', height ( phobos? 25 : 31 ) ) ; hideAllWindows ( ) ;
function Function ( ) { if ( this. isActive ) { return true ; } var activeSeries ; return ( activeSeries = this. activeSeries ( ) )!= null && ( activeSeries === this. vars. series. value ) ;
function Function ( v ) { return v!= null && v!== '' ; }
function Function ( strings ) { var hash = { }, i = strings. length ; while ( i -- ) { hash [ strings [ i ] ] = true ; } return Object. keys ( hash ) ; }
function Function ( service, params ) { var id = this. _getCommunicationId ( ) ; return this. _communicate ( service, params, "PUT", id, data ) ; }
function Function ( ) { if ( ( this. block!= null ) && this. block. mayHaveSideEffects ( [ ] ) ) { return this ; } else { return new Program ( null ) ; } }
function Function ( e ) { console. log ( e ) ; }
function Function ( scene ) { var catVar = scene. vars. category ; return catVar. x - catVar. width / 2 ; }
function Function ( value, attr ) { if ( value!== 'true' && (! _. isBoolean ( value ) || value === false ) ) { return format ( messages. acceptance, sentenceCase ( attr ) ) ;
function Function ( err, results ) { if ( err ) { return callback ( err ) ; } cfg. publicKey. id = results. publicKey ; cfg. publicKey. owner = results. owner ; callback ( ) ; }
function Function ( canvas, pizza ) { that. clearCanvas ( canvas ) ; that. toppingsContext = that. toppingsContext || that. getContext ( canvas ) ; drawImagePattern ( that. toppingsContext, pizza. get
function Function ( ) { p = new Flex ( this, opts ) ; $ ( this ). data ( "flex", p ) ; }
function checkEmail Function ( email ) { if ( email == "" ) return false ; var regex = /^[a-zA-Z]([a-zA-Z0-9]|[\.\_\-][a-
function Function ( frame ) { var animFrame = new cc. AnimationFrame ( ) ; animFrame. initWithSpriteFrame ( frame, 1, null ) ; this. _frames. push ( animFrame ) ; this. _totalDel
function Function ( opt_data, opt_sb ) { var output = opt_sb || new soy. StringBuilder ( ) ; output. append ( '\t<h3>Options</h3><table><tbody><tr><
function Function ( e ) { mouseIsDown = false ; theScene. onmouseup ( e ) ; }
function Function ( ) { var offset = $ ( this ). offset ( ) ; $ ( "#screenlet-content-search" ). css ( "display", "block" ) ; $ ( "#screenlet-content-search
function Function ( e ) { remaining -- ; if ( remaining === 0 ) { callback. call ( context, deleted ) ; } }
function Function ( ) { if ( animate ) { container. css ( animValues. property, "" ) ; } container. css ( "opacity", "" ) ; hidden = false ; }
function Function ( ) { oDynamicTable. iCurrentPage = oDynamicTable. iCurrentPage + 1 ; oDynamicTable. render ( ) ; }
function Function ( offset ) { var number = ByteCode. pop ( ) ; if ( number. value!== 0 ) { ByteCode. branch ( 3, offset ) ; return ; } }
function Function ( i, ele ) { var $ele = baidu ( ele ) ; $ele. prop ( "nonexisting", "foo" ). removeProp ( "nonexisting" ) ; strictEqual ( ele
function Function ( entities ) { for ( var n = 0 ; n < entities. length ; n ++ ) { this. updateEntity ( entities [ n ] ) ; } }
function Function ( ) { $ ( '#pan' ). val ( 'up' ) ; Mappr. resetAndBuild ( ) ; }
function Function ( d ) { return obj. y ( d. values [ i ]. user ) ; }
function Function ( data ) { console. log ( "fetched locale data for " + lang ) ; locale [ lang ] = data ; }
function Function ( ) { cc. log ( "stop all effects" ) ; cc. AudioEngine. getInstance ( ). stopAllEffects ( ) ; }
function Function ( ) { return aws. createClient ( this. config. secret, this. config. key, 'ec2.amazonaws.com' ) ; }
function Function ( attrs ) { var _ref ; if ( ( _ref = groupCur. groupKey ) == null ) { groupCur. groupKey = { } ; } return groupCur. groupKey [ attrs. id ] =
function Function ( ) { bb. menuBar. hideMenuBar ( ) ; }
function showSolution Function ( index ) { exam. Question [ index ]. solved = true ; showQuestion ( index ) ; if ( isQuestionAnsweredCorrectly ( index ) == 0 ) $ ( '#question-index-list #
function Function ( ) { console. assert ( this. position === 0 ) ; console. assert ( this. is_root ( ) ) ; return this. read_string ( ) ; }
function Function ( ) { cc. LabelBMFont. purgeCachedData ( ) ; }
function Function ( ) { if ( $ ( this ). is ( ':focus' ) ) { that. showList ( ) ; } }
function Function ( command, options ) { var commands = { } ; commands [ command ] = options || null ; return commands ; }
function Function ( err, req, data ) { if ( err ) return callback ( err ) ; addUserToData ( data, callback ) ; }
function Function ( workerId, opt_callback ) { var paramObject = { 'workerId' : workerId, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Worker.connectToWorker', param
function Function ( val ) { if ( typeof val === "number" ) this. _. s = val ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Debugger.stepOut', paramObject, opt_callback ) ; }
function Function ( c ) { return new Card ( { 'rank' : c. rank,'suit' : c. suit } ) ; }
function Function ( subject, data, callback ) { if ( callback == null ) callback = null ; return this. send ( subject, data, callback ) ; }
function Function ( ) { cc. Director. sharedDirector ( ). getTouchDispatcher ( ). addTargetedDelegate ( this, 0, false ) ; }
function Function ( json ) { _this. receiveMessages ( json ) ; _this. errorSleepTime = 500 ; console. log ( '-> poll after receiveMessages' ) ; _this. poll ( ) ; }
function Function ( ) { Aria. loadTemplate ( { div : "TESTAREA", classpath : "snippets.templates.domInteractions.DomInteractionTemplate" }, { fn : this. testAsync
function gotSharedViewModel Function ( err, sharedModel ) { res. render ( sharedModel. pageTemplateName, sharedModel ) ; }
function Function ( err ) { var msg = 'Removed job #' + kid ; CONF. log. info ( msg ) $done ( err ) }
function Function ( event ) { $ ( document ). unbind ( event ) ; showLoader = false ; $. mobile. hidePageLoadingMsg ( ) ; morePostsBtn. show ( ) ; renderNewPosts ( ) ; }
function Function ( err3, obj3 ) { if ( err3 ) { log. critical ( err3 ) ; } }
function Function ( err, results ) { if ( err ) { return callback ( err ) ; } callback ( null ) ; }
function Function ( e, dd ) { positionInLimit ( dd. offsetX - $sliderControl. offset ( ). left, dd. limit ) ; }
function Function ( contextNodeId, selector, opt_callback ) { var paramObject = { 'contextNodeId' : contextNodeId,'selector' : selector, } ; chrome. experimental. devtools. remoteDebug. sendCommand
function bufferTwitter Function ( ) { insertButtons ( ) ; removeExtras ( ) ; setTimeout ( bufferTwitter, 500 ) ; }
function Function ( progress ) { return 1 - easingFunction ( 1 - progress ) ; }
function Function ( message, i ) { io. sockets. emit ( 'broadcast', JSON. parse ( message ) ) ; }
function Function ( ) { CB. Launch ( null, null, 'left' ) ; }
function Function ( ) { if ( this. _isSingleton ) throw new Error ( 'can not get content from singleton element' ) ; return this. elem. innerHTML ; }
function Function ( v ) { if (! arguments. length ) return startAngle ; startAngle = d3_functor ( v ) ; return arc ; }
function test Function ( ) { waitForExplicitFinish ( ) ; setPermission ( testPageURL1, "indexedDB" ) ; setPermission ( testPageURL2, "indexedDB" ) ; executeSoon ( test
function Function ( event ) { connector. signal ( "localSend", jQuery. stringifyJSON ( { id : guid, event : event } ) ) ; }
function Function ( value, trigger, refresh ) { this. _clearInteractiveTimeout ( ) ; value = Math. max ( value, 0 ) ; this. _setInteractiveCenterAndSize ( this. _center, value ) ; this
function Function ( json, operands ) { return jpath. exec ( json, operands. slice ( 0, 2 ) )!= jpath. exec ( json, operands. slice ( 2 ) ) ; }
function Function ( x, y ) { var graphView = this. graphViewForPane ( this. get ( 'graphPane' ) ) ; return graphView. graphCanvasView. _checkInputAreaScreenBounds ( x
function Function ( errors, request ) { var classDef = this. _instantiateTemplate ( errors, parser, request, true ) ; classDef. setAnalysisContextOfVariables ( createContext ( parser ) ) ; classDef. analyze
function showRegistrationInfo Function ( info ) { dom. setInner ( "#email", info. email ) ; if ( info. returnTo ) { dom. setInner ( ".website", info. returnTo ) ; update
function Function ( scene ) { return scene. vars. item. color ; }
function Function ( ) { webview. executeJavascript ( "1 + 1" ) ; url = url || config. content ; if ( url ) { webview. setURL ( url ) ; } registerApplicationEvents ( ) ; }
function Function ( xhr ) { return xhr. withCredentials = true ; }
function Function ( module1 ) { console. log ( 'Executing module3.js' ) ; echo ( 'Executing module3.js' ) ; return { } ; }
function showTwitter Function ( ) { cont = "<p> Twitter</p>" ; changeContent ( this, cont ) ; }
function packUInt64 Function ( number ) { return Put ( ). word64be ( number ). buffer ( ) }
function Function ( args, update_fn ) { if ( update_fn == undefined ) { console. error ( 'AJAX.stream: called without update function' ) ; } ajax_request ( args, update_fn )
function Function ( val ) { if ( typeof val === "number" ) this. _. a = val ; }
function Function ( entry ) { return prepareActivity ( entry ) ; }
function Function ( count, err ) { console. log ('retry: %d %s', count, JSON. stringify ( err ) ) ; }
function Function ( e ) { var MapsWindow = require ( 'ui/common/maps/campusMap/MapsWindow' ) ; var mapsWindow = new MapsWindow ( ) ; navGroup. open ( mapsWindow, { animated : true }
function Function ( err, docs ) { }
function Function ( ) { expect ( mockedWebworks. execSync. argsForCall ). toContain ( execSyncArgs [ fields. indexOf ( "uuid" ) ] ) ; expect ( mockedWebworks. defineReadOnlyField
function Function ( ) { Application. isLoggedIn ( false ) ; Application. user ( { } ) ; $. cookie ( 'userId', null ) ; $. cookie ('sessionKey', null ) ; return false ;
function Function ( ) { var stores = subject. connection. objectStoreNames ; var actualStore ; for ( actualStore in subject. store ) { assert. ok ( ( stores. contains ( actualStore ) ), actualStore +'was not
function Function ( color ) { this. get ( 'wireframe' ). material. color. setHex ( color ) ; }
function Function ( ruleId, selector, opt_callback ) { var paramObject = { 'ruleId' : ruleId,'selector' : selector, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'CSS
function Function ( ) { deepEqual ( osg. Vec2. sub ( [ 2, 4 ], [ 2, 4 ], [ ] ), [ 0, 0 ], "test sub" ) ; }
function Function ( ) { if ( this. _interfaces!== null ) { this. _interfaces. siteId. setActive ( this. isPending ( ) ) ; } }
function Function ( string ) { return puts ( prefix ( string, inverse ( red ( " FATAL ", logger. FATAL ) ) ) ) ; }
function Function ( gtime ) { return this. __checkJump ( gtime - this. xdata. gband [ 0 ] ) ; }
function Function ( ) { return cc. SplitCols. create ( 3, this. _duration / 2.0 ) ; }
function Function ( val ) { if ( typeof val === "number" && val > 0 ) { this. _. timeout = val ; this. _. timeout_samples = ( timbre. samplerate * ( val / 1000
function Function ( ) { this. _topic. remove ( ) ; delete testApp ; }
function Function ( dt ) { cc. Director. sharedDirector ( ). getTouchDispatcher ( ). setPriority ( cc. CCMENU_HANDLER_PRIORITY + 1, this ) ; this. un
function Function ( ) { makeRequest ( $ ( this ). attr ( 'data-protocol' ), $ ( this ). attr ( 'data-port' ) ) ; }
function Function ( ) { app. set ( 'views', __dirname + "/views" ) ; }
function Function ( args ) { this. gameId = null ; if ( args ) { if ( args. gameId!== undefined ) { this. gameId = args. gameId ; } } }
function succHandler Function ( ) { CDOT. scopeId = undefined ; CDOT. userId = undefined ; CDOT. disconnectHandler ( ) ; }
function Function ( ) { if ( isFirstProjectOpen ) { $ ( exports ). triggerHandler ( "initializeComplete", _projectRoot ) ; } if ( projectRootChanged ) { $ ( exports ). triggerHandler ( "project
function getInfoLogMessagePrefix Function ( ) { return 'INFO [' + new Date ( ). toString ( ) + '] CacheBlockFirstThenAsync:'; }
function finishTest Function ( ) { resetUnlimitedQuota ( ) ; resetIndexedDB ( ) ; SimpleTest. executeSoon ( function ( ) { testGenerator. close ( ) ; SimpleTest. finish ( ) ; } ) ;
function Function ( ) { _. defaults ( this. options, this. default_options ) ; this. $input = this. $el. find ( 'input' ) ; this. render ( ) ; setTimeout ( this. _check
function Function ( ) { game. aliens. each ( function ( alien, alien_index ) { if ( this. contains ( alien. pos ) ) { this. die ( ) ; } }. bind ( this ) ) ; }
function Function ( ) { return func. apply ( null, args ) ; }
function Function ( layer, index ) { if ( layer. getVisible ( ) ) { var layerRenderer = this. getLayerRenderer ( layer ) ; f. call ( opt_obj, layer, layerRenderer
function Function ( ) { isSyncing = false ; isLive =! ( Cache. isActive ( ) &&! Cache. isOnline ( ) ) ; Log. info ( "Synced with server" ) ; }
function Function ( dt ) { cc. log ( "tick4" ) ; }
function Function ( ) { testGenerator. close ( ) ; }
function Function ( ) { return this. _context || ( this. _context = new nativeNroonga. Database ( databasePath ) ) ; }
function Function ( ) { referenceError }
function Function ( params ) { params = params || { } ; this. port = params. port || '8125' ; this. host = params. host || 'localhost' ; this. client = dgram. createSocket ( "ud
function Function ( ) { this. collection ( ). removeItem ( this ) ; this. getElement ( ). remove ( ) ; }
function Function ( router ) { switchFilter ( '' ) ; var controller = router. get ( 'applicationController' ) ; var context = app. entriesController ; context. set ( 'filterBy', '' ) ; controller. connectOutlet
function Function ( name ) { this. people = new Map ( ) this. name = name this. topic = "" this. mode = [ ] }
function Function ( ) { test. equal ( valuesReceived, jsonArray. length ) ; test. done ( ) ; }
function Function ( ) { var promise = CommandManager. execute ( Commands. FILE_OPEN, { fullPath : fullPath } ) ; waitsForDone ( promise ) ; }
function Function ( done ) { var store = subject. db. getStore ( 'Calendar' ) ; store. load ( function ( err, data ) { results = data ; done ( ) ; } ) ; }
function Function ( datalistid ) { this. dataListEditLeftSideView. render ( ) ; this. dataListEditFullscreenView. render ( ) ; }
function export_extension_set_tableWrapperWidths Function ( ) { export_extension_get_dimensions ( ) ; $ ( "#export_head,#xp" ). css ( "width", export_
function Function ( ) { var col = this. col - 1 ; return this. matrix. get_cell ( this. row, col ) ; }
function Function ( val ) { this. incremental = val ; }
function Function ( key, building ) { if ( building!= null && building. id == buildingID ) icon = 'img/markers/marker' + categoryID + 'fav.png' ; }
function Function ( file ) { if ( file. match ( new RegExp ( '\.' + self. ext ) ) ) { _task ( base, file ) ; } }
function safeRegexp Function ( source ) { try { return RegExp ( source, "i" ) ; } catch ( e ) { } }
function Function ( ) { this. _element. querySelector ( ".montage-InputNumber-plus" ). innerText = "+" ; this. _element. querySelector ( ".montage-InputNumber-minus" )
function splitKeyword Function ( str ) { if ( str ) { return str. replace ( /[\+\s　]+/g, " " ). split ( " " ) ; } return [ ] ; }
function Function ( ) { me. refresh ( ) ; me. core. refreshModel ( 'addresses' ) ; }
function Function ( ) { $ ( "#tabs" ). tabs ('select', 3 ) ; }
function Function ( ) { $ ( "#input_apiKey" ). change ( function ( ) { save_token_again ( this ) ; } ) ; $ ( "#input_baseUrl" ). change ( function ( ) { save
function Function ( file ) { this. local. path = getFilepath ( file, opts. input ) ; return fs. readFile ( file, 'utf8', this. next ) ; }
function Function ( ) { var mark = this. tl. timeMarkerPos ; return mark > this. cue. startTime && mark < this. cue. endTime ; }
function Function ( ) { Aria. loadTemplate ( { div : "TESTAREA", classpath : "snippets.widgets.list.Snippet" }, { fn : this. notifyTestEnd, scope
function Function ( obj ) { return { message : 'hey' } ; }
function ss_onsuccess Function ( ) { navigator. vibrate ( 100 ) ; navigator. mozNotification. createNotification ( _ ('screenshotSaved' ), filename ). show ( ) ; }
function delayed Function ( ) { if (! execAsap ) { func. apply ( context, args ) ; } timeout = null ; }
function Function ( view ) { this. hash [ view. id ] = view ; this. length ++ ; }
function Function ( point ) { cc. Log ( "DrawingPrimitive.drawPoint() not implement!" ) ; }
function Function ( entity, current, dest ) { throw ( "Not implemented!" ) ; }
function Function ( err2, obj ) { if ( err2 ) { log. critical ( err2 ) ; } }
function Function ( value, callback ) { callback ( value ) }
function Function ( ) { return { xclass : 'bar-item-separator' } ; }
function Function ( ) { cc. Director. sharedDirector ( ). getScheduler ( ). scheduleUpdateForTarget ( this, 0, false ) ; return true ; }
function Function ( fn ) { if ( block. total === Infinity ) { return block. pushAndRun ( fn ) ; } else { return block. push ( fn ) ; } }
function Function ( data ) { if ( sakai_global. content_profile ) { contentData = data || sakai_global. content_profile. content_data ; if ( contentData ) { doInit ( ) ; }
function Function ( line ) { if (! line. hidden && line. text. length == maxLineLength ) { recomputeMaxLength = true ; return true ; } }
function Function ( ) { c. add ( { id : 1 } ) ; expect ( c. length ). toEqual ( 1 ) ; }
function Function ( value, pattern ) { if ( value === "" ) { return true ; } var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])
function Function ( ) { var m = new Comment ( { } ) ; this. model. get ( "comments" ). add ( m ) ; window. appView. addUnsavedDoc ( this. model. id ) ; }
function switchToSecure Function ( ) { logIf ( 1, "Secure connection started" ) ; conn. socket = cleartext ; socket = cleartext ; socket. addListener ( 'data', dataListener ) ; conn. secure
function Function ( ) { return media. youtubeObject. getVolume ( ) / 100 ; }
function Function ( data ) { alert ( data. msg ) ; obj. hide ( ) ; }
function Function ( anchor ) { this. anchor = document. id ( anchor ) if (! this. anchor ) { this. anchor = document. body. getElement ( anchor ) } this. reposition ( true ) }
function Function ( findResult ) { expect ( findResult ). toBe ( null ) ; }
function Trace Function ( callFrames, event ) { this. callFrames = callFrames ; this. event = event ; this. date = new Date ( ) ; this. children = [ ] ; this. _relateToTrace ( _
function Function ( volume ) { this. mute. hidden = volume ; }
function Function ( ) { var element = $ ( this ) ; if ( element. data ( "ui-tooltip-title" ) ) { element. attr ( "title", element. data ( "ui-tooltip-title
function Function ( path ) { var lastdot = lastDotIndex ( path ) ; return lastdot === - 1? "" : path. substring ( 0, lastdot ) ; }
function Function ( e ) { Utils. debug ( "It thinks there was an error fetching the session. But chances are there wasnt...." + JSON. stringify ( e ) ) ; var se = new Session ( e ) ;
function Function ( e ) { log ( cliient_name + 'Uncaught error in send server:'+ e ) ; }
function Function ( had_error ) { self. log ( "Connection closed." ) ; self. connected = false ; }
function Function ( value, attr, length ) { if (! hasValue ( value ) || trim ( value ). length!== length ) { return format ( messages. length, sentenceCase ( attr ), length ) ; } }
function Stacks Function ( ) { this. put_stack = __bind ( this. put_stack, this ) ; this. get_stack = __bind ( this. get_stack, this ) ; }
function Function ( err, result ) { var source = (! result )? '' : ( new Buffer ( result, 'base64' ) ). toString ( 'utf-8' ) ; cb ( null, resp, source,
function Function ( container ) { container. clearAndRender ( window. templates. disabled_view ( ) ) ; }
function Function ( ) { menu. swipePanel ( { container : menu. find ( 'ul' ), children : '> ul > li' } ) ; }
function Function ( container ) { container. clearAndRender ( window. templates. disabled_view ( ) ) ; }
function Function ( key ) { this. data [ key ] = void 0 ; return this ; }
function Function ( ) { window. setTimeout ( this. progress. setValue, 0 ) ; }
function Function ( attributes ) { this. _modelBinder = new Backbone. ModelBinder ( ) ; this. settings = attributes. settings ; this. render ( ) ; }
function langContext Function ( req ) { return { lang : req. lang, locale : req. locale, gettext : req. gettext, ngettext : req. ngettext, format : req. format } ; }
function Function ( ) { var arrayOfArguments = NativeFunctions. getArguments ( "(D)V" ) ; var doubleToPrint = arrayOfArguments [ 0 ] ; JVM. println ( doubleToPrint. value (
function Function ( ignoreCache, scriptToEvaluateOnLoad, opt_callback ) { var paramObject = { 'ignoreCache' : ignoreCache,'scriptToEvaluateOnLoad' : scriptToEvaluateOnLoad,
function Function ( ) { return new gf. sim. Variable. Vec3 ( this. tag, this. flags, this. getter_, this. setter_ ) ; }
function Function ( ) { return this. getField ( 'float', 4 ) ; }
function Function ( ) { Aria. loadTemplate ( { div : "TESTAREA", classpath : "snippets.widgets.div.Snippet" }, { fn : this. notifyTestEnd, scope
function Function ( res ) { if (! res. calipsoEndCalled ) next ( ) ; }
function Function ( v ) { return JSON. stringify ( v ( ) ) ; }
function Function ( val ) { this. _. freq = timbre ( val ) ; }
function Function ( ) { testPasswordChangeFailure ( generateString ( bid. PASSWORD_MAX_LENGTH + 1 ), "newpassword", "missing old password, expected failure" ) ; }
function Function ( colpkr ) { $ ( editedobject ). css ( "z-index", 20 ) $ ( "#deleteBtn" ). css ( "z-index", 40 ) $ ( colpkr
function Function ( index ) { if (!! game_. GetMatch ( ) ) return game_. GetMatch ( ). teamB_. Players [ index || 0 ] ; return null ; }
function Function ( ) { var ids = { } ; ids. corpusid = "4C1A0D9F-D548-491D-AEE5-19028ED85F2B" ; ids.
function Function ( v ) { var value = this [ v ] ; if ( hd. isVariable ( value ) ) { value = value ( ) ; } if ( typeof value!== "function" ) { data [ v ] =
function Device Function ( ) { _. extend ( this, Backbone. Events ) ; $window. on ( 'orientationchange', _. bind ( this. trigger, this, 'orientation:change' ) ) ; }
function movePlaneMarker Function ( ) { marker. setPosition ( coords. getAt ( time ) ) ; }
function Function ( found, currElem ) { if ( currElem ) { return found || currElem. id === feature. id ; } }
function Function ( ex, type, message ) { result = { ex : ex, type : type, message : message } ; context. onError (!! ex? ex. responseText : message ) ; }
function Function ( match, operator, key ) { if (! key ) { return operator === '*'? '.*' : match ; } keys. push ( key ) ; return operator === '*'? '(.*?)' : '
function Function ( ) { Ext. getCmp ('mainView' ). setMasked ( false ) ; Ext. Msg. alert ( Ext. i18n. appBundle. getMsg ( 'RaxaEmr
function Function ( ) { return ( new Date ( this. getFullYear ( ), this. getMonth ( ) + 1, 0 ) ). getDate ( ) }
function imageIt Function ( ) { var selection = selectedText ; if ( selection == '' ) { alert ( 'Select some text with which to find images.' ) ; return ; } var iurl = 'http://images.search.yahoo.
function Function ( data ) { var tokens ; this. savedBuffer += data ; tokens = this. savedBuffer. split ( '\0' ) ; if ( tokens. pop ( ) ) return [ ] ; this. savedBuffer = '' ;
function Function ( ) { var f ; return function _up ( ) { return f || ( f = ( function ( _e ) { return _false ( ) ; } ) ) ; } }
function Function ( ) { this. model. set ( "username", $ ( ".username" ). val ( ) ) ; $ ( ".confirm-password" ). show ( ) ; $ ( ".password" ). focus (
function Function ( frame ) { var c = _. isNull ( frame. get ( 'layers' ) )? 0 : frame. get ( 'layers' ). length ; frame. loader = new loaderView ( { count :
function Function ( ) { geo. getCurrentPosition ( s, e ) ; expect ( exec ). toHaveBeenCalledWith ( jasmine. any ( Function ), jasmine. any ( Function ), "Geol
function Function ( y ) { this. _position. y = y ; this. setNodeDirty ( ) ; }
function Function ( list ) { var chars = [ ] ; for ( var ch in list ) chars. push ( ch ) ; return new RegExp ( "([" + chars. join ( "" ) + "])", "gm" ) ;
function Function ( error, collection ) { if ( error ) { that. error ( error ) ; } that. collection = collection ; callback ( ) ; }
function Function ( ) { return get ( this, labelPath ) ; }
function Function ( ) { cc. Director. sharedDirector ( ). getTouchDispatcher ( ). addTargetedDelegate ( this, 0, true ) ; }
function Function ( page_id, id, value ) { return this. sendResponse ( this. node ( page_id, id ). select ( value ) ) ; }
function Function ( key, cb ) { var blockingMock = { hello : "world", France : "Paris", Germany : "Berlin", UK : "London" } ; called = true ; cb ( null,
function formatter Function ( i ) { if (! i ) { return ; } return i. replace ( /\n/g,'' ). replace ( /[ ]{2,}/g,'' ) ; }
function Function ( ) { assert. equal ( 'aGV5', utils. base64. encode ( 'hey' ) ) ; }
function Function ( err, val ) { assert. equal ( undefined, val ) ; assert. equal ( "MemJS SET: " + errors [ 3 ], err. message ) ; callbn += 1 ; }
function Function ( x ) { return 0.5 * Math. log ( ( 1 + x ) / ( 1 - x ) ) ; }
function takeScreenshot Function ( ) { navigator. vibrate ( 100 ) ; var screenshotProps = { detail : { type : 'take-screenshot' } } ; window. dispatchEvent ( new CustomEvent ('mozContentEvent
function Function ( ) { var pathToTest = "../LICENSE" ; ( function ( ) { requiredir ( pathToTest ) ; } ). should. throw ( "The path provided is not a directory. [" + _path
function Function ( ) { return new cc. Point ( this. _anchorPointInPoints. x, this. _anchorPointInPoints. y ) ; }
function Function ( error ) { this. loading_show ( ) ; dojo. publish ( "/encuestame/tweetpoll/dialog/error", [ error ] ) ; }
function Function ( comp_src, comp_dst, alpha_src, alpha_dst ) { return comp_dst * alpha_dst - comp_src * alpha_src ; }
function Function ( data, dataType ) { if (! data ) { console. error ( "error." ) ; return ; } var newview = _createTplView ( data ) ; if ( callback ) { callback ( newview )
function Function ( ) { if ( xhr. readyState === 4 ) { equal ( xhr. responseText, js, "generatePopcornString generated expected Popcorn JS." ) ; start ( ) ; startTests ( ) ;
function Function ( ) { this. $el. html ( this. template ( this. model. toJSON ( ) ) ) ; this. input = this. $ ( '.edit' ) ; return this ; }
function Function ( Response ) { $ ( '#accounts' ). append ( Response. result ) ; $ ( '#accounts.account:last' ). hide ( ). fadeIn ( 'fast' ) ; }
function hidePlanePosition Function ( ) { for ( var fid = 0 ; fid < flights. length ; fid ++ ) { map. getLayersByName ( "Flight" ) [ 0 ]. removeFeatures ( flights [ fid ].
function Function ( req, res ) { res. render ( 'test.ejs', { title : 'Mozilla Persona QUnit Test', layout : false } ) ; }
function Function ( id, lambda, error_lambda ) { return _staticApi. get_object_by_key ('stream', id, lambda, error_lambda ) ; }
function Function ( ) { ko. cleanNode ( $ ( '#testContainer' ) [ 0 ] ) ; $ ( '#testContainer' ). empty ( ) ; ko. validation. reset ( ) ; }
function buildIndexViewModel Function ( posts ) { var page = topLevelPages. index ; return new ViewModel ( page. title, page. pageTemplateName ). extend ( { posts : posts } ) ; }
function Function ( path ) { return app. dynamicViewHelpers. scheme ( req, res ) + app. dynamicViewHelpers. url_no_scheme ( req, res ) ( path ) ; }
function Function ( error, result ) { if ( error ) { console. log ( "update_categorie error with category: " + categoryData. category_id + " " + categoryData. name ) ; console. log ( error
function Function ( event ) { this. saw_responsefinished = true ; if ( event. data && event. data. content ) { this. responsebody = event. data ; } }
function Function ( ra ) { return 5.8 + 0.00168 * ra ; }
function Function ( data ) { launchSmallPopup ( i18n ( "smallpopup.group.rename.title" ), data, i18n ( "action.rename" ), 'validate' ) ; }
function Function ( line ) { var l = line. text ; if (! line. hidden && l. length > maxLineLength ) { maxLine = l ; maxLineLength = l. length ; maxLineChanged = true ; recompute
function Function ( ) { socket. destroy ( ) ; }
function Function ( ) { return ( [ "div", ui_strings. M_VIEW_LABEL_NO_RETURN_VALUES, "class", "not-content inspection" ] ) ; }
function Function ( fileName ) { return path. basename ( fileName ) ; }
function Function ( ) { var mediator = Cc [ '@mozilla.org/appshell/window-mediator;1' ]. getService ( Ci. nsIWindowMediator ) ; var document = mediator. get
function Function ( ) { self. clicked = true }
function Function ( ) { return!! this. getHealthFn_? this. getHealthFn_ ( ) : - 1 ; }
function Function ( id ) { currentSong = playlist. getSongById ( id ) ; }
function Function ( ) { equal ( view. $ ( "ul" ). children ( ). length, 4, "Only four elements" ) ; equal ( view. views. ul. length, 4, "Only four Views" ) ;
function Function ( ) { websockets. configure ( conf ) ; var expectedPath = path. join ( 'components', 'button2','server', 'websockets','socket.js' ) ; expect (
function Function ( flipX ) { if ( this. _flipX!= flipX ) { this. _flipX = flipX ; this. setTextureRect ( this. _rect, this. _rectRotated, this.
function Function ( ) { return this. _winSizeInPixels ; }
function Function ( ) { return this. filter ( function ( todo ) { return todo. get ( 'completed' ) ; } ) ; }
function Function ( options ) { options = options || { } ; this. stream = options. stream || false ; return director. Router. prototype. configure. call ( this, options ) ; }
function Function ( name ) { me [ name ] = fs. readFileSync ( resolve ( path, name ) ) }
function Function ( ) { if ( adminPanel_extension_resizeTimer ) clearTimeout ( adminPanel_extension_resizeTimer ) ; adminPanel_extension_resizeTimer = setTimeout ( adminPanel_extension_
function Function ( ) { this. recalculate_total_count ( ) ; this. countdiv. innerHTML = this. totalcount. toString ( ) ; }
function Function ( ) { this. _logIf ( 0, "Client connection error: " + err, this. socket ) ; this. socket. destroy ( ) ; }
function Function ( ) { this. id = null ; this. elm = null ; this. par = null ; this. title = "" ; this. menu = null ; }
function Function ( type, uid, opt_callback ) { var paramObject = { 'type' : type, 'uid' : uid, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Profiler.
function Function ( editor ) { align ( editor, 'left' ) ; }
function Function ( attrs ) { var _ref ; if ( ( _ref = groupCur. attributes ) == null ) { groupCur. attributes = { } ; } return groupCur. attributes [ attrs. id ] = attrs.
function init Function ( ) { $ ( DocumentManager ). on ( "currentDocumentChange", onCurrentDocumentChange ) ; setTimeout ( onCurrentDocumentChange, 0 ) ; }
function Function ( ident ) { return { id : ident } ; }
function Function ( key ) { return jQuery. parseJSON ( storage. getItem ( name + "-" + key ) ) ; }
function Function ( ) { this. instance = new MustacheWax ( { simple : true, min : true } ) ; }
function Function ( ) { if ( useAbility ( abilities,'swap', leftButtons. find ( '.swap' ) ) ) { socket. emit ('swap' ) ; } }
function ch_answer Function ( ) { OnCallHandler. currentCall. answer ( ) ; }
function Function ( location, opt_callback ) { var paramObject = { 'location' : location, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Debugger.continueToLocation', paramObject, opt_
function Function ( t ) { assert. equal ( t, '1' ) ; }
function Function ( rpcHandler, connector ) { return new GeolocationFeature. GeolocationFeature ( rpcHandler, connector ) }
function Function ( error, value ) { self. processAsyncMethodCallback ( error, value ) ; if (! error ) { callback ( null, self. options. cachedValue ) ; } else { callback ( error ) ; } }
function Function ( e, data ) { data. formData = { 'tags' : $ ( '#tags' ). val ( ) } ; }
function create_plugin Function ( ) { var plugin = { } plugin_func. call ( plugin ) return plugin }
function Function ( ) { __g. isResizing = true ; __g. resizeDirection = "west" ; }
function Function ( obj, next ) { delete obj. hash if ( obj. login_count ) obj. login_count = parseInt ( obj. login_count ) if ( obj. role ) obj. role = parseInt ( obj.
function Function ( ) { if ( 'opening' == self. readyState && ws. OPEN == conn. readyState ) { self. readyState = 'open' ; self. emit ( 'open' ) ; } }
function Function ( ) { console. log ( "blort" ) ; raises ( function ( ) { regula. unbind ( { elementId : "myText" } ) ; }, new RegExp ( "Element with id myText
function topLoad Function ( URL ) { pURL = URL ; $ ( "#move" ). animate ( { "margin-top" : "150%" }, { duration : aTime } ) setTimeout ( "pageLoad()",
function Function ( ) { el. removeClass ( 'clicked' ) ; el. removeClass ( 'loading' ). removeClass ('small' ) ; }
function Function ( response ) { $fill_graph_container. empty ( ) ; plot_fill_graph ( response. graph_info, $fill_graph_container ) ; draw_overflow_visualization ( response. overflow ) ;
function Function ( e, type ) { type? util. getRemoteFile ( e. uri, type ) : util. getRemotePage ( e. data. uri ) ; }
function Function ( shine ) { curContext. useProgram ( programObject3D ) ; uniformi ( "uUsingMat3d", programObject3D, "uUsingMat", true ) ; uniformf ( "uShininess
function Function ( ) { if ( $. trim ( upload_frame. text ( ) )!== "" ) { alert ( upload_frame. text ( ) ) ; } else { $ ( "#manage_tab_button" ).
function Function ( result ) { results. push ( result ) ; suitesFinished ++ ; if ( suitesFinished === suitesCreated ) { that. logger. log ( results ) ; that. _closeDb ( ) ; } }
function themeChanged Function ( ) { scroller. className = scroller. className. replace ( /\s*cm-s-\S+/g, "" ) + options. theme. replace ( /(^|\s
function Function ( msg, scope ) { return def. error ( def. string. join ( " ", "Assertion failed.", def. format ( msg, scope ) ) ) ; }
function Function ( error, notificationListener ) { if ( error ) { console. log ( error ) ; } test. ok ( notificationListener. should. have. property ( 'user', 'A7S7F8GA7SD11
function Function ( ) { that. parent. fire ( "paste" ). fire ( "paste:composer" ) ; }
function parseError Function ( stream, expected ) { if (! stream ) stream = 'EOF' ; else stream = '"' + stream + '"' ; throw 'Parse Error: expected'+ expected + ', got'+ stream ;
function Function ( child, zOrder ) { cc. Assert ( child!= null, "Child must be non-nil" ) ; this. _reorderChildDirty = true ; child. setOrderOfArrival ( cc. s
function Function ( ) { console. log ( scope. colorsrefonly ) ; }
function Function ( t, s ) { return cc. TransitionFade. create ( t, s ) ; }
function Function ( file, content, callback ) { assert. equal ( file, 'newPlayer.zip' ) ; assert. equal ( content, 'file_contents' ) ; callback ( ) ; }
function handleDownloadSuccess Function ( e ) { this. startDownload ( e. invs [ 0 ]. hash, null, e. conn ) ; }
function Function ( ) { cc. log ( "2nd block" ) ; }
function Function ( args ) { if ( this. __fired ) { throw args || new Error ( "Already fired" ) ; } this. __error = Array. prototype. slice. call ( arguments ) ; this. __resolve ( )
function exceptional Function ( error ) { if ( error ) throw error }
function Function ( ) { types. registerType ( CommandType ) ; types. registerType ( ParamType ) ; }
function Function ( node, value ) { node. value = ( value!= null )? value : '' ; }
function Function ( val ) { this. _. freq = timbre ( val ) ; }
function Function ( ) { feedings. pager ( ) ; }
function updateSavedContent Function ( editor, savedContent ) { editor. ckc. savedContent = savedContent ; }
function Function ( deps, cb, er ) { deps. rjsSkipMap = true ; return context. require ( deps, cb, er ) ; }
function Function ( success, data ) { sakai. api. Util. startup ( data ) ; sakai. api. i18n. init ( data ) ; }
function Function ( e ) { "stopPropagation" in e && e. stopPropagation ( ) "preventDefault" in e && e. preventDefault ( ) e. cancelBubble = e. cancel = true return
function Function ( tab ) { mediaRequestsMap [ tab. id ] = { requestNum : 0 } ; listUpdater ( tab ) ; console. log ( "Created!" ) ; }
function canHaveProperties Function ( object ) { var type = exports. getType ( object ) ; return ( ( type === "object" ) || ( type === "array" ) ) && ( object!== null ) ; }
function Function ( event, ui ) { $ ( ui. item ). bind ( "mouseup", function ( ) { open_box ( ui. item ) ; } ) ; PlayListUpdate ( ) ; }
function thlui_init Function ( ) { this. delNumList = [ ] ; }
function Function ( a ) { this. _depth_ += a || 1 ; }
function Function ( data ) { alert ( data. msg ) ; window. location. href = "smsc_list.jsp" ; }
function ReadableStream Function ( ) { this. readable = true ; this. encoding = 'utf8' ; }
function Function ( i, node ) { var cslNode = new CSLEDIT. CslNode ( node ) ; if ( cslNode. hasAttr ( "name" ) ) { dropdownValues. push ( cslNode
function Function ( ) { if ( this. _openGLView. canSetContentScaleFactor ( ) ) { this. _openGLView. setContentScaleFactor ( this. _contentScaleFactor ) ; this. _isContentScaleSupported
function Function ( msg, desc ) { var err = new Error ( msg ) ; err. type = 'TransportError' ; err. description = desc ; err. transport = this. name ; this. emit ( 'error', err
function Function ( migrations, version, options ) { debug_log ( "Starting migrations from " + version ) ; this. _migrate_next ( migrations, version, options, [ ] ) ; }
function Function ( full ) { if ( full == null ) full = true ; if ( full ) { arrwrite ( REAVETARD_TITLE, true ) ; } else { arrwrite ( REAVETARD_TITLE_S
function Function ( ) { model = null ; validator = null ; }
function Function ( filename, collection ) { collection. update ( { "filename" : filename }, { $inc : { "metadata.accessCount" : 1 }, $set : { "metadata.access" : new Date ( ) }
function Function ( attrs ) { var _ref ; if ( ( _ref = comp. attributeRelationship ) == null ) { comp. attributeRelationship = { } ; } return comp. attributeRelationship. group = this. stringBuffer
function Function ( ) { var columns = processor. getColumns ( ) ; var expected = [ 'name', 'address', 'email_address', 'description', 'age' ] ; assert. deepEqual ( columns
function Function ( ) { that. highlighter ( elt. id, elt. offset, elt. line, elt. column, elt. span, "rgb(254, 196, 79)" ) ; }
function Function ( ) { stream. destroy ( ) ; }
function Function ( model, error ) { assert. same ( this. model, model ) ; assert. equals ( [ 'age', 'name' ], error ) ; done ( ) ; }
function foldl1 Function ( func ) { return this. tail ( ). foldl ( func, this. head ( ) ) ; }
function getTooltip Function ( feature ) { var tooltip = document. createElement ( 'div' ) ; tooltip. className ='map-tooltip map-tooltip-0' ; tooltip. innerHTML = feature ; return tooltip ;
function Function ( errno ) { logger. warn ( { message : "feather socket server shutting down.", category : 'feather.socket', immediately : true } ) ; }
function Function ( ) { plansUpdated ++ ; if ( plansUpdated === this. plansCount ) { this. updateFinished. dispatch ( ) ; } }
function Function ( a, c ) { if ( c ( b, g, f ) ) d [ a ] =! 0, d. valid =! 1 }
function Function ( target ) { this. _super ( target ) ; if ( this. _restoreOriginalFrame ) { this. _origFrame = target. displayFrame ( ) ; } }
function Function ( enabled ) { return ( enabled? Locale. $STR ( "cookies.Disable Break On Cookie" ) : Locale. $STR ( "cookies.Break On Cookie" ) ) ; }
function Function ( ) { $ ( "div.info span.loaded" ). html ( ++ loaded ) ; $ ( this ). parents ( "div.wrap" ). removeClass ( "hide" ). addClass ( "loaded
function Function ( val ) { if ( typeof val === "number" ) { if ( 1 <= val && val <= 511 ) { this. _. bpm = val ; } } }
function Function ( suffix ) { return Image. url ( this. id, suffix ) ; }
function Function ( e ) { if ( $ ( e. relatedTarget ). parents ( '.item' ). get ( 0 )!= $ ( this ). get ( 0 ) ) { aigua. resetMenu ( ) ; } }
function Function ( i, id ) { batchRequests. push ( { 'url' : '/p/' + id + '.2.json','method' : 'GET' } ) ; }
function RequestWrapper Function ( req ) { return req ; }
function Function ( err, app ) { cb ( app ) ; }
function format_hour Function ( date_obj ) { return pad2 ( date_obj. getHours ( ) ) + ':' + pad2 ( date_obj. getMinutes ( ) ) ; }
function test Function ( ) { waitForExplicitFinish ( ) ; removePermission ( testPageURL, "indexedDB" ) ; executeSoon ( test1 ) ; }
function Function ( result, opt_callback ) { var paramObject = {'result' : result, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Page.setShowPaintRects', paramObject,
function Function ( ) { if (! isError ) { setTimeout ( function ( ) { $altMsgDiv. fadeOut ('slow' ) }, 5000 ) ; } }
function upload Function ( ) { console. log ( "[INFO] Request handler 'upload' was called." ) ; }
function Function ( authenticated ) { setAuthenticationStatus ( authenticated ) ; if (! authenticated ) authenticated = false ; complete ( onComplete, authenticated ) ; }
function Function ( match, context ) { if ( typeof context. getElementsByTagName!== "undefined" ) { return context. getElementsByTagName ( match [ 1 ] ) ; } }
function Function ( ) { cc. Director. sharedDirector ( ). getScheduler ( ). pauseTarget ( this ) ; cc. Director. sharedDirector ( ). getActionManager ( ). pauseTarget ( this ) ; }
function Function ( ev, data ) { selectedWPsChanged ( self. convView, self. msgView ) ; }
function Function ( val ) { if ( typeof val === "number" ) this. _. min = val ; }
function Function ( name ) { ASSERT ( typeof name === "string" ) ; return name. slice ( - COLLSUFFIX. length )!== COLLSUFFIX ; }
function Function ( url ) { let loc = url. href + url. leaf ; vs. addScript ( ss. getScriptLabel ( loc, url. href ), { url : loc } ) ; }
function Function ( rawKvAnnotation ) { return new Zipkin. KvAnnotation ( { key : rawKvAnnotation. key, value : rawKvAnnotation. value, annotationType : rawKvAnnotation.
function DV_initializePanes Function ( ) { let stackframes = document. getElementById ( "stackframes+breakpoints" ) ; stackframes. setAttribute ( "width", Prefs. stackframesWidth ) ; let variables
function Function ( ) { if ( this. value == true ) this. collapsed = false if (! this. name ) this. name = this. checkboxName this. callParent ( arguments ) ; }
function expense_add_edit_validate Function ( ) { if ( $ ( '#add_edit_expense_project_ID' ). val ( ) == undefined ) $ ( '#expenses_ext_form_add
function Function ( ) { View = Calendar. Test. MockView ; }
function Function ( results ) { results [ 0 ]. set ( "like", results [ 0 ]. get ( "like" ) ++ ) ; results [ 0 ]. save ( ) ; }
function Function ( ) { var paginator = this, index = paginator. _cIndex, target = index + 1 ; paginator. set ( INDEX, target ) ; }
function OnEnterGameIntroState Function ( ) { level. generateNextLevel ( ) ; setIntroUI ( ) ; showIntroUI ( ) ; }
function Function ( data ) { }
function alloc Function ( ) { var ptr = ref. alloc ( 'pointer', ref. NULL ) return ptr }
function displayError Function ( heading, text ) { showPage ( 'error-page' ) ; $ ( '#error-page textarea' ). val ( heading + ':\n' + text ) ; }
function Function ( ) { Utils. debug ( "Saving session" ) ; $ ( "#user-edit-modal" ). modal ( "hide" ) ; $ ( "#user-modal" ). modal (
function Function ( ) { $ ( '.selected' ). removeClass ('selected' ) ; $ ( '.tab' ). hide ( ) ; $ ( '#events_on_this_page' ). addClass ('selected
function Function ( scene ) { return scene. vars. value. label ; }
function Function ( ) { socket. emit ( ev, _emitObj ) ; }
function Function ( Var ) { this. _vertexZ = Var ; }
function Function ( ) { if ( callback ) { callback. call ( self ) ; } }
function Function ( ) { return this. getContentElement ( this. blockHelpKey ) ; }
function Function ( ) { spyOn ( plugin, DEFAULT_SERVICE ) ; req. params. service = "not" ; req. params. action = "here" ; server. handle ( req, res ) ; expect ( plugin [
function Function ( v ) { if (! arguments. length ) return outerRadius ; outerRadius = d3_functor ( v ) ; return arc ; }
function Function ( data, textStatus, jqXHR ) { mutiny. retry = 1 ; mutiny. render ( data ) ; }
function Function ( pos ) { WordNetFile. appendLineChar ( fd, pos, 0, buff, callback ) ; }
function Function ( alpha_src, alpha_dst ) { return 0 ; }
function Function ( ) { sigInst. HideWrongTimeNodes ( - 1 ) ; updateButtonLabel ( "Day+", + 1 ) ; updateButtonLabel ( "Day-", - 1 ) ; }
function Function ( ) { self. over = false ; }
function Function ( obj ) { var curtop = 0 ; if ( obj. offsetParent ) { do { curtop += obj. offsetTop ; } while ( obj = obj. offsetParent ) ; } return curtop ; }
function Function ( target ) { this. _total = 0 ; this. _nextDt = this. _innerAction. getDuration ( ) / this. _duration ; this. _super ( target ) ; this. _innerAction.
function Function ( d ) { d. currentX = d. x ; d. currentY = d. y ; return d. baseID ; }
function Function ( ) { expect ( entries ). not. toBe ( null ) ; }
function lists_customerShrinkHide Function ( ) { $ ( '#customerShrink' ). css ( "background-color", "transparent" ) ; }
function Function ( e ) { Utils. debug ( "There was an error fetching the session. Loading defaults..." + e ) ; s. set ( "sessionFields", self. get ( "corpus" ). get
function Function ( err, textStatus ) { $ ( "#login-status-message" ). empty ( ) ; displayError ( mw. msg ( 'login-failed' ), textStatus ) ; fail ( textStatus ) ; }
function Function ( page_id, id ) { return this. sendResponse ( this. node ( page_id, id ). isVisible ( ) ) ; }
function Function ( ) { if ( tipsy. hoverState === 'in' ) tipsy. show ( ) ; }
function Function ( err, results ) { if ( err ) return fn ( err ) ; if ( query. id ) return fn ( null, results [ 0 ] ) ; fn ( null, results ) ; }
function MouseClickResponder Function ( params ) { this. _model = params. exposedModel ; }
function Function ( ) { if ( this. gameController ) this. gameController. destruct ( ) ; this. gameController = null ; }
function Function ( ) { if (! this. _textureAtlas. getTexture ( ). hasPremultipliedAlpha ( ) ) { this. _blendFunc. src = cc. GL_SRC_ALPHA
function Function ( ) { this. getScheduler ( ). unscheduleUpdateForTarget ( this ) ; }
function Function ( err, data ) { console. log ( "presenting page" ) ; params. restaurants = data ; res. render ( "Event/index.jade", params ) ; }
function Function ( ) { $ ( this ). toggleClass ( "open" ) ; $ ( this ). closest ( 'li' ). toggleClass ( "open" ) ; }
function Function ( ) { self. close ( self. verificationMessage, { mustAuth : false } ) ; oncomplete && oncomplete ( ) ; }
function Function ( event ) { if ( confirm ( "Restore defaults will erase all changes you make.\n Are you sure you want to continue?!\n" ) ) ui. PrefsDlg. restore_defaults (
function Function ( ) { var shim = this. _boundingBox. shim ; if ( shim ) { shim. sync ( ) ; } } : function ( ) { }
function Function ( ) { var $this = $ ( this ) ; if (! $this. find ( ".fd-list-check" ). is ( ":checked" ) ) $this. removeClass ( "fd-list-
function Function ( breakpointId, opt_callback ) { var paramObject = { 'breakpointId' : breakpointId, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Debugger.removeBreakpoint'
function error Function ( message ) { if ( jsv. debugMode ) { throw new jsv. Error ( message ) ; } }
function al_putAlarmList Function ( alarm ) { AlarmManager. setEnabled ( alarm, alarm. enabled ) ; self. refresh ( ) ; }
function Function ( ) { return moment ( ). hours ( 9 ). minutes ( 10 ). seconds ( 0 ) }
function Function ( className ) { if ( className!= showSelector ) { dom. hide ( "." + className + ":not(." + showSelector + ")" ) ; } }
function unload Function ( ) { $ ( DocumentManager ). off ( "currentDocumentChange", onCurrentDocumentChange ) ; $ ( ".CodeMirror-lines" ). off ( "mousemove", onLinesMouseMove
function Function ( stopfx ) { switch ( stopfx ) { case 0 : { break ; } case 1 : { this. laser. pause ( ) ; this. laserPlaying = false ; break ; } } }
function Function ( error, json ) { if (! error ) { callback ( null, json ) ; } else { callback ( error ) ; } }
function Function ( ) { var location = document. location. protocol + "//" + document. location. hostname return "javascript:void(function(){ if(window.location.host.match(/makr/)){alert
function Function ( ) { return this. _ranges [ this. _ranges. length - 1 ]. max ; }
function Function ( e ) { if ( this. _activeDrag ) { this. _setSliderValueOnDrag ( e ) ; this. _fireOnChange ( ) ; this. _cache [ 'handle' ]. focus ( )
function Function ( ) { window. addEventListener ( "deviceorientation", gyroscopeAPI. onSuccess ) ; gyroscopeAPI. watchID = setTimeout ( "gyroscopeAPI.executeCBs()", gy
function Function ( evt ) { var data = self. getData ( ) ; if ( data ) data. value = $ ( this ). val ( ) ; }
function Function ( e ) { this. updateFromEditForm ( ) ; }
function Function ( ctor ) { return ctor ; }
function Function ( ) { self. _reset ( ) ; self. debug ( 'FIN packet received. Disconnecting...' ) ; self. emit ( 'end' ) ; }
function Function ( data ) { launchSmallPopup ( i18n ( "smallpopup.group.rename.title" ), data, i18n ( "action.rename" ), 'validate' ) ; }
function Function ( ) { if ( this. InputManager. init ) { this. InputManager. init ( ) ; } }
function getSharedViewModel Function ( forSectionName ) { return { topLevelMenuItems : getTopLevelMenuItems ( forSectionName ) } ; }
function Function ( test ) { test. expect ( 1 ) ; var expectA = 'define("hello",[],function(){return"hello"}),define("world",[],function(){return"world"}),require(["hello","world
function Function ( actor, event ) { if ( event. get_key_symbol ( ) == Clutter. Escape ) this. _close ( ) ; return true ; }
function Function ( ) { this. GetStage ( ). Pause ( ) ; this. TeamA. Pause ( ) ; this. TeamB. Pause ( ) ; }
function Function ( touch, event ) { cc. log ( "++++++++++++++++++++++++++++++++++++++++++++" ) ; this. _beginPos = touch. getLocation ( ) ; this. _beginPos = cc. Director. getInstance ( ). convertTo
function Function ( ) { if ( jQuery ( this ). attr ( 'class' )!== null && jQuery ( this ). attr ( 'class' ). length === 0 ) { jQuery ( this ). removeAttr (
function Function ( val ) { this. _. band = timbre ( val ) ; }
function _buildWebSocketUrl Function ( ) { var url = _attachHeaders ( _request ) ; return decodeURI ( jQuery ( '<a href="' + url + '"/>' ) [ 0 ]. href. replace ( /
function Function ( d ) { g. nodes_array. push ( jQuery. extend ( true, { }, d ) ) }
function Function ( response ) { if (! response ||! response. Result ) { alert ( "Oops - Didn't save order properly" ) ; } }
function Function ( time ) { this. canvas. render ( this. currentScene, this. model. getCamera ( ) ) ; this. updateInfoBox ( ) ; this. updateLabels ( ) ; }
function Function ( nodeName, node, sonString ) { if ( nodeName === 'blockquote' ) { return '[blockquote]' + sonString + '[/blockquote]' ; } }
function Function ( ) { elements. title. find ( '.glimpse-url.loading' ). fadeOut ( ) ; }
function Function ( ) { en. player. move ( 0, - 1 ) ; dd. processTick ( ) ; }
function Function ( ) { calledWith = arguments ; return model ; }
function Function ( ) { if ( this. index && ( this. index + 2 >= this. imgWidthStick. length ) ) { this. proloadImg ( 2 ) ; } }
function Function ( tmxFile, resourcePath ) { var ret = new cc. TMXMapInfo ( ) ; if ( ret. initWithTMXFile ( tmxFile, resourcePath ) ) { return ret ; } return null ;
function Function ( ) { loadModuleExports ( path. join ( 'bin', 'raind' ), mocks ) ; expect ( server. start ). toHaveBeenCalled ( ) ; }
function Function ( factory ) { if ( typeof define === 'function' && define. amd ) { define ( [ 'jquery' ], factory ) ; } else if ( jQuery &&! jQuery. fn. qtip ) { factory (
function cutByResolution Function ( string ) { if ( string. length > 1024 ) { return escaped ( string. substr ( 0, 1024 ) ) + '...' ; } return escaped ( string ) ; }
function Function ( ) { var tpl = new Template ( '{foo-bar}' ) ; assert. equal ( tpl. render ( { 'foo-bar' : 'fo' } ), 'fo' ) ; }
function enableSaveBtn Function ( enable ) { docSaveBtn [ enable?'removeClass' : 'addClass' ] ( 'disabled' ) ; }
function Function ( req, res ) { 'use strict' ; res. send ( { 'hello' : 'world' } ) ; }
function fmt_table_short Function ( table ) { var res = '' ; for ( k in table ) { res += k + '=' + table [ k ] + '<br/>' ; } return res ; }
function Function ( d ) { g. nodes_array. push ( jQuery. extend ( true, { }, d ) ) }
function places_getTopSites Function ( maximum, callback ) { this. db. getPlacesByFrecency ( maximum, callback ) ; }
function Function ( ) { var ext = this. filename. match ( /\.[^.]+$/ ) [ 0 ] ; if (! ext ) ext = '.js' ; extensions [ ext ] ( this, this. filename ) ;
function Function ( settings, ui ) { var $el = $ ( ui ) ; if ( $el. is ( 'a' ) ) { this. href = ui. href ; } }
function Function ( ) { var p = { x : tools. Random. Number ( 50 ) + 0.0, y : tools. Random. Number ( 50 ) + 0.0 } ; return p ; }
function Function ( opts ) { var options = opts || { clickable : true, visible : true, zIndex : this. getDefaultZIndex ( ), } ; this. setOverlay ( new MultiMarker ( options )
function Function ( ) { var e = re. e ( this. name ), f = this. _re_factory ; if ( f ) f. apply ( e, arguments ) ; return e ; }
function Function ( ) { elem. remove ( ) ; conversation. off ( "change" ) ; selfConversationsView. addConversationWithEffect ( conversation, true, thisElementWasSelected ) ; }
function Function ( ev ) { scorm_activate_item ( scorm_up ( scorm_tree_node. getHighlightedNode ( ), true ) ) ; }
function Function ( value ) { if ( this. dScaleY == value ) return this ; this. dScaleY = value ; this. staticMatrix = null ; this. scaleMatrix = null ; this. updateMatrix ( ) ; return this
function Function ( ) { return new PathFinder ( this. Semantics ) ; }
function Function ( ) { this. social_services = { twitter : { }, facebook : { } } ; this. user_profile = new Backbone. Model ( NEWSBLUR. user_social_profile ) ; }
function Function ( ) { testDB ( Mongo. findTargetById ( '12345678901234567890abcd' ), function ( findResult ) { expect ( findResult ). toBe ( null ) ; } ) ;
function Function ( k, e, val ) { return function ( ) { bind ( e, k. name, val ) ; return enter ( k. next, VOID ) } }
function getFirstGistFile Function ( gist ) { return gist. files [ _ ( gist. files ). keys ( ) [ 0 ] ] ; }
function Function ( val ) { if ( typeof val === "number" ) this. _. sl = val ; }
function Boiler Function ( ) { this. debugging = false ; this. filenameIdMap = { } ; this. id = 0 ; this. everything = '' ; }
function Function ( string ) { var date = new Date ( string ) ; return isNaN ( date )? null : date ; }
function Function ( current, dest ) { throw ( "Not implemented!" ) ; }
function Function ( testdir ) { watch. appendSpace ( testdir + '/js/bridge.js' ) ; }
function tbHelp Function ( evt ) { tabs. open ( self. data. url ( "pages/about.html" ) ) ; }
function Function ( done ) { testSupport. calendar. clearStore ( 'calendars', done ) ; }
function Function ( ) { buildContent ( ) }
function Function ( ) { return this. GetGame ( ). GetMatch ( ) ; }
function Function ( count ) { log ( 'Number of lines:'+ count ) ; callback ( req, file, parsedData ) ; }
function Function ( ) { self. request ( { "since" : self. nextSince } ) ; }
function Function ( ) { origRepoTypes. push ( { value : $ ( this ). val ( ), text : $ ( this ). text ( ) } ) ; }
function Function ( ) { $ ( '#BBTagsHolder' ). toggle ( ) ; }
function attempt Function ( aPath ) { if ( foundPath ) { return } if ( fs. existsSync ( aPath ) ) { foundPath = aPath } }
function Function ( err, req, data ) { if ( data ) { callback ( null, data ) ; } else { callback ( err ) ; } }
function run_dnscheck Function ( ) { interval = setInterval ( pollResult, retry_interval ) ; load ( ) ; return false ; }
function Function ( err ) { if ( err ) { console. log ( "FAIL:", err ) ; return ; } return f. apply ( null, Array. prototype. slice. call ( arguments, 1 ) ) ; }
function Function ( content, encoding ) { console. log ( 'encoding', encoding ) ; load ( resource. url, content, resource. type, line ) ; }
function Function ( info ) { return info. name === name && info. baseUrl === 'bamboo' && info. typeName === 'Atlassian Bamboo' ; }
function Function ( job, next ) { spy2. should. have. not. been. called ( ) ; next ( 'first try is a fail' ) ; }
function Function ( e ) { return "" + ( e. attr ( 'data-chapter' ) ) + "/" + ( e. attr ( 'data-subchapter' ) ) + "/" + ( e. attr (
function Function ( eventName, opt_callback ) { var paramObject = { 'eventName' : eventName, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOMDebugger.setEventListenerBreakpoint'
function startResponse Function ( err, badges ) { if ( err ) return next ( err ) ; var data = computeStats ( badges ) ; response. render ('stats', { stats : data } ) ; }
function Function ( ) { return!! ( this. $tip && this. $tip [ 0 ]. parentNode ) ; }
function Function ( ) { this. getActionManager ( ). removeAllActionsFromTarget ( this ) ; }
function Function ( size ) { throw new Error ( "Invalid use of Array constructor. Use JSIL.Array.New." ) ; }
function Function ( force ) { this. _refresh ( force ) ; }
function filemgr_view_file Function ( e ) { e. preventDefault ( ) ; filemgr_get_file_details ( $ ( this ). parent ( 'li' ). attr ( 'title' ) )
function Function ( ) { Aria. loadTemplate ( { div : "TESTAREA", classpath : "snippets.widgets.numberfield.Snippet" }, { fn : this. notifyTestEnd,
function Function ( ) { var event = page. evaluate ( function ( ) { return window. loggedEvent. keydown ; } ) ; expect ( event. which ). toEqual ( phantom. keys. A ) ; }
function Function ( i, category ) { customData [ category ] = getCategoryData ( filters, category ) ; }
function suggest_foot Function ( label ) { label = label? label : 'その他のハイパーバイザ' ; return $ ( '<option />' ). val ( 'OTHER' ). text (
function Function ( raw_txt ) { if ( raw_txt!= null ) this. text_data. raw_text = raw_txt ; return this. text_data. raw_text ; }
function Function ( node, event ) { if ( event. button === 0 ) { console. log ( 'context from 0 observed, suppressing' ) ; Cards. _suppressClick = true ; } else event. preventDefault ( ) ; return
function Function ( ) { this. setCityConfig ( 'baltimore' ) ; var dashboardView = new Dashboard. Views. Main ( { "config" : Config } ) ; this. showView ( dashboardView ) ; dashboardView
function Function ( line, index ) { msgLines [ index ] = Utils. escapeHTML ( line ) ; }
function Function ( error ) { return console. log ( '✎'. red, ( "Error: " + error ). red ) ; }
function Function ( nodeId, opt_callback ) { var paramObject = { 'nodeId' : nodeId, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOM.getEventListenersForNode',
function Function ( res ) { if ( typeof success == "function" ) { success ( __self. db, _version, result. systemPath ) ; } }
function Function ( data ) { if ( data. pass == masterpass ) { musicqueue. flushQueue ( ) ; clearTimeout ( dospotify. timeoutId ) ; io. sockets. emit ('re_init' ) ; }
function Function ( value ) { var match = this. getResultSetMatch ( value ) ; return ( match === null )? value : match ; }
function editRecord Function ( id ) { floaterShow ( ts_ext_path + "floaters.php", "add_edit_timeSheetEntry", 0, id, 650, 500 ) ; }
function onEvent Function ( event ) { if (! this. running ) throw this. name + " has terminated and cannot process more events" this. externalQueue. push ( event ) if ( this. stable ) this. extEventLoop (
function Function ( ) { if ( that. getTableFromRegistry ( this ) ) { ( new Table ( this, that ) ). deactivate ( ) ; jQuery ( this ). attr ( 'id', null ) ; }
function Function ( request, response ) { exports. commentsRoute ( 0, request, response ) ; }
function Function ( ) { if (! this. rest ) { return 1 ; } else { return 1 + this. rest. length ( ) ; } }
function Function ( ) { model. trigger ( 'destroy', model, model. collection, options ) ; }
function Function ( ) { var y = 90 ; y -= this. targetSpeed * 2 ; y += this. speed * 2 ; y = Math. min ( 162, Math. max ( 16, y ) ) ; return y ; }
function Function ( ) { test. equal ( Meteor. user ( ). username, username ) ; }
function Function ( err2, res ) { if ( err2 ) { log. critical ( err2 ) ; } }
function Function ( ) { FB. init ( { appId : appId, channelUrl : channelUrl, status : false, cookie : true, xfbml : true } ) ; FB. getLoginStatus ( onStatusChange ) ; cache
function Function ( ) { new SNAKE. Game ; }
function Function ( data ) { if ( data. Stations [ 0 ]!= undefined ) thatmivb. options. station = thatmivb. capitalizeWords ( data. Stations [ 0 ]. name ) ; }
function Function ( ) { __g. isResizing = true ; __g. resizeDirection = "north" ; }
function save_toggles Function ( ) { savetogglestate ( to36baseString ( toggleBinaryGlobal ) ) ; }
function Function ( e ) { if ( e. keyCode == 13 ) { performSearch ( ) ; e. preventDefault ( ) ; } }
function Function ( value ) { return!! value? new Handlebars. SafeString ( value. toString ( ) ) : "" ; }
function Function ( markers ) { return this. overlay. addMarkers ( markers ) ; }
function Function ( error, response, body ) { if ( error ) { callback ( error, undefined ) ; } else { var body_parsed = JSON. parse ( body ) ; callback ( false, body_parsed ) ;
function Function ( channel, message ) { var json = JSON. parse ( message ) ; json. channel = channel ; message = JSON. stringify ( json ) ; util. writeSizedString ( this. socket, message ) ; }
function Function ( ) { __g. isResizing = true ; __g. resizeDirection = "south" ; }
function Function ( observer, context ) { for ( var i in this. _observers ) if ( this. _observers [ i ]. observer == observer && this. _observers [ i ]. context == context )
function Function ( ) { var u = Settings. BIPLUGIN? encodeURI ( Saiku. session. username + "/pentahorepository2/resource" ) : encodeURI ( Saiku. session. username + "/re
function Function ( ) { function filterOutAnonymous ( uiSourceCode ) { return!! uiSourceCode. url ; } var uiSourceCodes = WebInspector. workspace. uiSourceCodes ( ) ; return
function Function ( item ) { var message = item. sourceURL + ":" + item. line ; if ( item. function ) message += " in " + item. function ; console. log ( "  " + message ) ; }
function Function ( dialog ) { $. modal. close ( ) ; }
function updateSavedRevision Function ( editor, savedRevision ) { editor. ckc. savedRevision = savedRevision ; }
function Function ( event ) { this. event = event ; }
function Function ( ) { var events = [ 'dragStart', 'dragMove', 'dragEnd' ] ; var thisHandler = this ; events. forEach ( function ( ev ) { view. bind ( Events [
function export_extension_triggerCHK Function ( ) { if ( $ ( '.ki_export' ). css ( 'display' ) == "block" ) { export_extension_reload ( ) ; } else {
function Function ( s ) { return ( w0 / sqr ( rho ) ) * cosh ( r0 ) * tanh ( rho * s + r0 ) - ( w0 / sqr ( rho ) ) *
function gotReadingList Function ( error, readingListItems ) { if ( error ) { callback ( error ) ; } else { callback ( null, { title : 'Reading list', items : readingListItems, shared : getSharedView
function onClose Function ( had_error ) { self. destroy ( ) }
function Function ( user ) { var player = new Player ( user. id, this. physicsEngine ) ; this. players [ user. id ] = player ; return player ; }
function Function ( data ) { $scope. name = data. name ; }
function Function ( responseObj ) { if ( responseObj && typeof responseObj == 'object' ) { self. set ( responseObj ) ; callback && callback. call ( self, responseObj ) ; } self. removeEvents ( throwA
function Function ( d ) { d. currentX = d. x ; d. currentY = d. y ; return d. x }
function Function ( ) { expect ( 1 ) ; stop ( ) ; ua. importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom
function Function ( ) { $ ( '.NB-profile-save-button', this. $modal ). addClass ( 'NB-modal-submit-grey' ). removeClass ( 'NB-modal-submit-
function Function ( event ) { self. isOpen = true ; self. connection = req. result ; callback ( null, self ) ; self. emit ( 'open', self ) ; }
function Function ( ) { var goalId = $ ( this ). attr ( "id" ). replace ( "add-on-course-link-", "" ) ; postAchievement ( goalId, "", "oncourse
function Function ( ) { return { original : code. _src [ r. line ], replacement : fixError ( r, code ) } ; }
function Function ( ) { spyOn ( transform, 'uriToLinkID' ). andCallThrough ( ) ; spyOn ( db, 'addNewLinkHit' ). andCallFake ( function ( ) { return helper. resolveAP
function Function ( i, style ) { var prop = $. css ( elem, style ) ; if ( data. text. css ( style )!= prop ) { data. text. css ( style, prop ) ; }
function Function ( router, event ) { router. transitionTo ( 'item', { item_id : event. context. id } ) ; }
function Function ( callback ) { for ( var freq in this. _favList ) { callback ( this. _favList [ freq ] ) ; } }
function setTheme Function ( theme ) { preview. attr ( 'data-design', theme ) ; udpateBackground ( ) ; }
function Function ( ) { if ( $openMenu. length ) { $openMenu. find ( 'a' ). blur ( ) ; } }
function defineMacro Function ( name, func ) { return global. leisureMacros [ name ] = func ( ) ; }
function onGenerateButtonClicked Function ( event ) { try { var generatedData = generateAddon ( ) ; window. location. href = "data:application/zip;base64," + generatedData ; } catch ( err ) {
function Function ( ) { return this. overlay_. getPosition ( ) ; }
function Function ( ) { if (! highlighted ) return ; $ ( "table tbody tr:not(.highlighted)" ). hide ( ) ; focused = true ; }
function cameraLoaded Function ( ) { callback ( ) ; }
function Function ( butter ) { butterLifeCycle. rememberButter ( butter ) ; butter. preparePopcornScriptsAndCallbacks ( function ( ) { succeeded = true ; ok ( true, "Ready called without any scripts/callbacks
function Function ( ) { Handlebars. registerHelper ( 'whatis', function ( param ) { console. log ( param ) ; } ) ; _. bindAll ( ) ; this. render ( ) ; }
function Function ( declarationFunction ) { if (! declarationFunction. variableTable_ ) { var variableList = [ ] ; declarationFunction ( variableList ) ; declarationFunction. variableTable_ = new gf. sim. VariableTable ( variableList
function Function ( ) { if ( sync_post ( this, '/bindings/:vhost/e/:source/:destination_type/:destination' ) ) update ( ) ; return false ; }
function getSavedRevision Function ( editor ) { return editor. ckc. savedRevision ; }
function Function ( name ) { return function ( obj ) { delete value ( obj ) [ name ] ; } ; }, { resolvers : [ String ] }
function onPluginRun Function ( v ) { _t. def = v ; finish ( ) ; }
function Double Function ( value ) { require ( 'util/Util' ). inherits ( this, Primitive, Enum. dataType. DOUBLE, value ) ; }
function onNewMsgEnd Function ( ) { console. log (' new fetched, header processing' ) ; newChewReps. push ( $imapchew. chewHeaderAndBodyStructure ( msg ) ) ; console
function Function ( ) { return checker. checkLines ( editorCtrler ) ; }
function Function ( ) { waitsFor ( function ( ) { return!! applauncher. browserExecPath ; } ) ; runs ( function ( ) { expect ( applauncher. browserExecPath ). toBeDefined ( ) ;
function Function ( _ ) { if (! arguments. length ) return _yElasticity ; _yElasticity = _ ; return chart ; }
function Function ( data ) { var stub = sinon. stub ( { isGenericAlert : function ( ) { }, } ) ; stub. data = data ; return stub ; }
function Function ( index ) { delete_button ( index, code ) ; down_button ( index, code ) ; up_button ( index, code ) ; upload_button ( index, code ) ; }
function Function ( dt ) { cc. log ( "tick1" ) ; }
function CookiePanel Function ( ) { }
function Function ( comp_src, comp_dst, alpha_src, alpha_dst ) { return comp_dst * alpha_dst ; }
function Function ( ) { calledWith = arguments ; object. onactiveCalled = true ; }
function checkHttpProxyUrl Function ( value, formValues ) { if ( formValues [ "source" + number ] === "http_proxy" && value. length === 0 ) { return err ; } }
function Function ( ) { export_extension_select_filter ( ) ; }
function Function ( ) { if ( fd [ 0 ] === "string" && /^[$_a-z0-9][a-z0-9]*$/. test ( fd [ 1 ] ) ) {
function Function ( name, elementId ) { var element = document. getElementById ( elementId ) ; element. innerHTML = "Hello, " + name + ", JavaScript is running." ; }
function Function ( event ) { var box = new NewMessageBox ( id, applicationFrame, id, name ) ; box. select ( ) ; }
function Function ( tooltip, context ) { tooltip. label = Locale. $STR ( "cookies.removeall.tooltip" ) ; return true ; }
function Function ( ) { $ ( ".jq_coins" ). hide ( ). remove ( ) settings. expire_callback ( score ) }
function Function ( ) { oldOrder. sortable ( 'cancel' ) ; }
function Function ( ) { this. showView ( labsView ) ; }
function Function ( gremlinjs ) { 'use strict' ; gremlinjs. getLoader ( "./gremlins/" ). load ( ) ; }
function Function ( msg, port ) { injectCode ( 'http', msg, port ) ; }
function Function ( value ) { $ ( '#value' ). html ( 'The value is'+ value +'after 5 seconds' ) ; }
function Function ( newKey ) { Account. _profilePicKey = newKey || Math. random ( ) ; }
function Function ( editingAccessoryType ) { this. _editingAccessoryType = ( editingAccessoryType!== Pushpop. TableViewCell. EditingAccessoryType. None )? editingAccessoryType : null ; }
function Function ( header, content ) { this. current. request. headers [ header + "". toLowerCase ( ) ] = content + "". toLowerCase ( ) ; return this ; }
function Function ( tally ) { var view = new TallyView ( { model : tally } ) ; this. $ ( "#tally-list" ). append ( view. render ( ). el ) ; }
function Function ( ) { $ ( "#email" ). val ( "unregistered@testuser.com" ) ; $ ( "#password,#vpassword" ). val ( testHelpers. generateString ( bid. PASSWORD
function f1 Function ( arg1, arg2 ) { try { this. undef ( ) ; } catch ( exception ) { ex = exception ; } }
function Function ( thread ) { res. partial ( 'thread', { thread : thread. getModel ( ) } ) ; }
function Function ( index ) { this. index = index ; var galleryItemsEl = $ ( '#gallery ul li' ) ; galleryItemsEl. removeClass ( 'active' ) ; $ ( galleryItemsEl. get ( index - 1
function Function ( req, res ) { renderCachableView ( req, res,'signup.ejs', { title : _ ( 'Sign Up' ), fullpage : false } ) ; }
function Function ( options ) { this. _models = [ ] ; Backbone. View. call ( this, options ) ; View. viewCount ++ ; View. views [ this. cid ] = this ; this. _created_at
function Function ( jXHR, textStatus, errorThrown ) { if ( textStatus!== 'abort' ) { alert ( 'Could not load feed. Is reddit down?' ) ; } }
function Function ( ) { assert. instanceOf ( subject, Calendar. Store. Abstract ) ; assert. equal ( subject. db, db ) ; assert. deepEqual ( subject. _cached, { } ) ; }
function Function ( constantPool ) { this. _name = constantPool. getUTF8Info ( this. nameIndex ) ; this. _descriptor = constantPool. getUTF8Info ( this. descriptorIndex ) ; }
function Function ( ) { self. leave ( this ) ; }
function Function ( v, k ) { Ti. App. Properties ['set' + v ] ( prefix + k, self. model. get ( k ) ) ; }
function Property$get_isCalculated Function ( ) { return this. _isCalculated ; }
function waitingNodes Function ( dataTable ) { $ ( 'tr input.check_item:visible', dataTable ). replaceWith ( spinner ) ; }
function Function ( dest ) { util. puts ( "building..." ) ; dest = dest || prefix + ".js" ; build. build ( dest ) ; util. puts ( "> " + dest ) ; }
function Function ( translation, result ) { return Matrix4. fromRotationTranslation ( Matrix3. IDENTITY, translation, result ) ; }
function Function ( nodeId, outerHTML, opt_callback ) { var paramObject = { 'nodeId' : nodeId, 'outerHTML' : outerHTML, } ; chrome. experimental. devtools. remoteDebug. sendCommand (
function Function ( ) { t. equal ( counter, ++ ev_counter, "workd done [" + counter + "] " ) ; }
function Function ( d ) { return obj. h - obj. y ( d. values [ i ]. system ) -.5 - obj. y ( d. values [ i ]. user ) ; }
function Function ( d ) { return yAxisHeight ( ) - y ( d. value ) ; }
function Function ( ) { return this. _vertexZ ; }
function Function ( step ) { knob. set ( "text", maps. points [ step ] ) ; }
function handleAddressVerifyCheckResponse Function ( onComplete, status, textStatus, jqXHR ) { if ( status. status === 'complete' && status. userid ) setUserID ( status. userid ) ; complete (
function Function ( doc, req ) { doc. title = 'FIFO Test' ; return { title : doc. title, content : templates. render ( 'fifo_test.html', req, doc ) } ; }
function Function ( requestId, opt_callback ) { var paramObject = {'requestId' : requestId, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Network.getResponseBody', paramObject,
function Function ( options ) { this. options = options!= null? options : { clickable : true, zIndex : this. getDefaultZIndex ( ) } ; return this. setOverlay ( new google. maps. Marker (
function Function ( ) { $input. inputFileThumb ( options ) ; $input. prependTo ( $input. parents ( '.ui-widget-content' ) ) ; }
function getQueries Function ( ) { return [ 'btapp/torrent/all/*/remove/', 'btapp/torrent/all/*/open_containing/', 'btapp/torrent/all/*/
function Function ( change ) { options [ parentName ]. arrayChanged ( change. event, change. item ) ; }
function Function ( code, message ) { this. static. error ( code, message ) ; }
function ")&&typeof console.log==" object "){[" log "," info "," warn "," error "," assert "," dir "," clear "," profile "," profileEnd
function Function ( ) { this. leftPane. domNode. style. display = this. isPhone ( )? "none" : "" ; this. leftView. show ( ) ; }
function Function ( $scope, $routeParams, clientApi ) { var p ; p = $routeParams ; return clientApi. gridpageJson ( { link : p. link }, function ( data ) { return
function Function ( chart ) { chart. trigger ( 'error' ) }
function soundManager_fireVolumeChangeEvent Function ( ) { var evt = document. createEvent ( 'CustomEvent' ) ; evt. initCustomEvent ( 'volumechange', true, false, { currentVolume : this. current
function browser_openInNewTab Function ( url ) { this. createTab ( url ) ; this. updateTabsCount ( ) ; }
function err Function ( elem ) { elem. html ( errorTpl ( ) ). css ( 'display', 'block' ) ; }
function Function ( ) { $listItems = testWindow. $ ( "#open-files-container > ul" ). children ( ) ; return $listItems. length === 2 ; }
function Function ( e ) { info = new WscPacket ( 'user'+ e. user + '\n' + e [ '*info' ] ) ; channel. registerUser ( info ) ; channel. setUserList (
function Function ( ) { expect ( lexer. __readNumber__ ( text [ 0 ] ). type ). toEqual ( Hyper. TokenType. NUMBER ) ; }
function Function ( xhr ) { if ( queue && requestQueue [ queue ] ) { requestQueue [ queue ]. clearQueue ( ) ; } if ( $. isFunction ( fnError ) ) { fnError ( xhr ) ; }
function Function ( e ) { eventos. mueve_mouse. emitir ( { x : e. clientX, y : e. clientY } ) ; }
function Function ( done ) { rolodex. account. set ( null, { "email" : "brock@sintaxi.com" }, function ( errors, account ) { global. account_id = account.
function Function ( ) { cc. log ( "Pausing" ) ; this. _pausedTargets = cc. Director. getInstance ( ). getActionManager ( ). pauseAllRunningActions ( ) ; }
function Function ( ) { var ellipsoid = Ellipsoid. WGS84 ; var center = ellipsoid. cartographicToCartesian ( Cartographic. ZERO ) ; expect ( function ( ) { Shapes.
function Function ( v, k ) { if ( typeof my. cache [ k ]. value!== 'undefined' ) { delete my. cache [ k ] ; } }
function Function ( i ) { iColumn = aiColumns [ i ] ; this. style. width = that. s. aiInnerWidths [ iColumn ] + "px" ; }
function Function ( ) { testPasswordChangeFailure ( "oldpassword", generateString ( bid. PASSWORD_MAN_LENGTH + 1 ), "too short new password, expected failure" ) ; }
function Function ( ) { try { return cont ( ) ; } catch ( err ) { return console. log ( "ERROR PRINTING VALUE: " + err. stack ) ; } }
function Function ( chart ) { chart. trigger ( 'error' ) }
function Function ( match, operator, key ) { if (! key ) { return operator === '*'? '.*' : match ; } keys. push ( key ) ; return operator === '*'? '(.*?)' : '
function Function ( ) { localyticsSession. init ( localyticsAppId ) ; localyticsSession. open ( ) ; localyticsSession. upload ( ) ; this. uploadTimer = setInterval ( localyticsSession
function Function ( funcDef ) { var statements = funcDef. getStatements ( ) ; if ( statements!= null ) { this. _optimizeStatements ( funcDef, statements, 0 ) ; } }
function Function ( ) { this. getScheduler ( ). resumeTarget ( this ) ; this. getActionManager ( ). resumeTarget ( this ) ; }
function Function ( ) { if ( this. _images ) { this. _setState ( 0, 1 ) ; this. _slideshowCount = 0 ; this. _setSlideshowInterval ( ) ; this. fireEvent ( "
function Function ( ) { chrome. tabs. remove ( id ) ; }
function Function ( message, expectedFields ) { start = function ( origStart ) { TestHelpers. testTriggered ( message, expectedFields ) ; start = origStart ; start ( ) ; }. bind ( null, start
function Function ( ) { this. _grossini. setPosition ( cc. PointMake ( 60, 120 ) ) ; this. _tamara. setPosition ( cc. PointMake ( 60, 220 ) ) ; this. _kath
function analyseChapter Function ( sourceCode ) { chapterText = '' ; chapterText += sourceCode. match ( /<div class='notes'>([\s\S]*?)<\/div>\s*<div id="story">
function Function ( subcontext, subtemplate, opt ) { return this. createDocumentFragment ( ) ; }
function Function ( ) { this. table = this. get ( 'table' ) ; if (! this. table ) { throw "you should specify a table model" ; } this. unset ( 'table', { silent : true
function Function ( error, data ) { if ( ++ counter < 3 ) { command ('retry', 'abort' ) ; } else { done ( ) ; } }
function GotNotificationRequest Function ( request ) { DLog ( "BackgroundScript: Got Notification request." ) ; if ( request. actionName == "Show" ) { notificationManager. Show ( request. requestData ) ; } }
function Function ( ) { me. _refreshLine ( ) ; ( typeof me. onchange == 'function' ) && me. onchange ( ) ; }
function Function ( key, value ) { var content = get ( this, 'content' ) ; Ember. assert ( fmt ( "Cannot delegate set('%@', %@) to the 'content' property of object proxy %@:
function Function ( ) { priv. editProxy [ 0 ]. focus ( ) ; editproxy. beginEditing ( true ) ; priv. stopNextPropagation = false ; }
function Function ( xhr ) { if ( xhr. status == 401 ) { Trello. deauthorize ( ) ; Trello. authorize ( defaultOptions ) ; } else { $ ( "#view" ). html ( "<h1
function Function ( parentName ) { var singularName = parentName. substring ( 0, parentName. length - 1 ) ; return parentName + ':' + req. params [ singularName + 'Id' ] ; }
function Function ( pos ) { if ( pos < 0 || this. items. length <= pos ) return ; this. parallax. commit ( pos * this. itemWidth ( ) ) ; this. position = pos ; this. afterMove
function Function ( ) { play. call ( this, this. getAttribute ( 'loop' )!= undefined ) ; }
function Function ( comp_src, comp_dst, alpha_src, alpha_dst ) { return comp_src * alpha_src + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function Function ( pipe, $event, data, callback ) { this. sendCmd ( "Event", { event : $event, data : data }, pipe, callback ) ; }
function Function ( thisp, k, v ) { if ( key. test ( k ) && typeof my. cache [ k ]. value!== 'undefined' ) { delete my. cache [ k ] ; } }
function Function ( code, msg ) { var err = new Error ( msg || http. STATUS_CODES [ code ] ) ; err. status = code ; return err ; }
function Function ( ) { expect ( errorCode ). toBe ( FileError. NOT_FOUND_ERR ) ; }
function Function ( ) { this. TeamA = CreateTeam ( 1 ) ; this. TeamB = CreateTeam ( 2 ) ; this. LoadAssets ( ) ; this. GetStage ( ). Setup ( stage ) ; }
function Function ( parentName ) { var singularName = parentName. substring ( 0, parentName. length - 1 ) ; return parentName + ':' + req. params [ singularName + 'Id' ] ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Page.getCookies', paramObject, opt_callback ) ; }
function Function ( req, res ) { var data = { title : "Tau logout", } req. logout ( ) ; res. render ( 'logout', data ) ; }
function Function ( rule ) { rule. isAllowed ( addOptions ( { url : 'http://hotmail.com', username : 'felix' } ), _w ( this. callback ) ) ; }
function Function ( ) { var path = (! this. _html5 && this. _getHashPath ( ) ) || Y. getLocation ( ). pathname ; return this. removeQuery ( this. removeRoot ( path ) )
function Function ( e ) { e. stopPropagation ( ) ; }
function Function ( uncountable ) { return new regexp ( '\\b' + uncountable + '$', 'i' ). test ( word ) ; }
function Function ( maxCallStackDepth, opt_callback ) { var paramObject = {'maxCallStackDepth' : maxCallStackDepth, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Timeline.start
function Function ( ) { if (! this. _existingDialog ) return ; this. _existingDialog. close ( ) ; this. _existingDialog = null ; }
function Function ( object, prop, options ) { if (! ( object && object [ prop ] ) ) return null ; return _. isFunction ( object [ prop ] )? object [ prop ] ( options ) : object [ prop ] ;
function Function ( appSchemas ) { schemas = appSchemas ; console. log ( "starting" ) ; async. parallel ( [ startPolling, function ( cb ) { getMeetups ( schemas, cb ) }
function Function ( json ) { var latest = json. data [ 0 ] ; cb ( latest ) ; }
function Function ( data ) { alert ( data. msg ) ; window. location. href = window. location. href ; }
function Function ( e ) { if ( String. fromCharCode ( e. charCode ). toLocaleUpperCase ( ) === 'N' ) { instructions. firstElementChild. innerHTML = "choose Up or down,
function Function ( ) { Create. create ( 8, "Comment" ) ; }
function Function ( ) { return update ( ) ; }
function Change__string Function ( str ) { try { return this. _stringBundle. GetStringFromName ( str ) ; } catch ( e ) { Components. utils. reportError ( "Missing string: " + str ) ;
function Function ( name ) { this. set ( name,! this. get ( name ) ) ; }
function Function ( field ) { field. reqd = mandatory? 1 : 0 ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Profiler.collectGarbage', paramObject, opt_callback ) ; }
function Function ( ) { return this. featureType. backgroundOpacity ; }
function al_putAlarmList Function ( alarm ) { AlarmManager. setEnabled ( alarm, alarm. enabled ) ; AlarmList. refresh ( ) ; }
function Function ( dt ) { cc. Director. sharedDirector ( ). getScheduler ( ). pauseTarget ( this ) ; }
function Function ( ) { tributary. clear ( ) ; delete tributary. nodes ; tributary. nodes = [ ] ; tributary. init ( tributary. ctx ) ; tributary. execute ( )
function Function ( e, tooltipData ) { hideTooltip ( ) ; $ ( document ). trigger ( 'init.tooltip.sakai', tooltipData ) ; }
function Function ( ) { this. set ( 'completed',! this. get ( 'completed' ) ). save ( ) ; }
function Function ( ) { var selectedUsers = this. _getSelectedUsers ( ) ; if ( this. confirmBeforeRemove ) { this. _confirmRemove ( selectedUsers ) ; } else { this. _removeUsers ( selectedUsers
function Function ( evt ) { func. call ( timeline. node ) ; timeline. next ( ) ; }
function Function ( done ) { client. deleteFile ( '/test/user2.json', function ( err, res ) { assert. ok (! err ) ; assert. equal ( 204, res. statusCode ) ; done ( )
function Function ( priority ) { this. getScheduler ( ). scheduleUpdateForTarget ( this, priority,! this. _isRunning ) ; }
function Function ( ) { if ( CKEDITOR. instances [ 'article-content' ] ) { CKEDITOR. instances [ 'article-content' ]. destroy ( true ) ; } CKEDITOR. replace ( 'article-content
function Function ( index, value ) { $ ( value ). find ( 'a[redirect-link=true] div' ). removeClass ( 'hover' ) ; }
function Function ( ) { this. $el. modal ( 'hide' ) ; this. remove ( ) ; zeega. app. busy = false ; return false ; }
function Function ( ) { this. model. set ( "username", $ ( ".username" ). val ( ) ) ; $ ( ".confirm-password" ). show ( ) ; $ ( ".password" ). focus (
function Function ( inScope ) { return ( this. expr. mayHaveSideEffects ( inScope ) ) || ( beingDeclared ( this. assignee ) ). length ; }
function Function ( ) { console. error ( "onShown never fired", arguments ) ; }
function Function ( ) { this. $el. addClass ( "editing" ) ; this. input. focus ( ) ; }
function Function ( obj ) { return toString. call ( obj ) == '[object Number]' ; }
function Function ( ) { var arrayOfArguments = NativeFunctions. getArguments ( "(F)V" ) ; var floatToPrint = arrayOfArguments [ 0 ] ; JVM. println ( floatToPrint. value.
function Function ( fragmentId, fragment ) { if ( row. maxSpanHeight < fragment. height ) row. maxSpanHeight = fragment. height ; }
function Function ( value, callback ) { if ( isPending ( value ) ) watch ( value, callback ) else callback ( value [ valueOf ] ) }
function addDim Function ( escapedDimLabel, label ) { tooltip. push ( '<b>' + escapedDimLabel + "</b>: " + ( def. html. escape ( label ) || " - " ) + '<br
function Function ( t ) { t. ok ( true, "nested ok" ) t. end ( ) }
function Function ( topic ) { topic = this. get ( topic, false ) if ( topic ) removeListener ( topic, callback ) }
function Function ( ) { var n = this. get ( 'node' ) ; _bridge. request ( n ) ; return this ; }
function Function ( template, vars ) { renderer. render ( target + ".contents", template, vars ) ; dom. addClass ( BODY, className ) ; dom. fireEvent ( window, "resize
function Function ( val ) { if ( typeof val === "object" && val instanceof Array ) { this. _. args = val ; } }
function Function ( e ) { console. log ( "Got error: " + e. message ) ; callback ( { cashboard : [ ], error : e. message } ) ; }
function Function ( event ) { that. cleanNumerations ( ) ; if ( that. showNumbers ( ) ) { that. createNumeratedHeaders ( ) ; } }
function Function ( searchId, opt_callback ) { var paramObject = {'searchId' : searchId, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOM.discardSearchResults', paramObject
function Function ( ) { this. doToolbar ( 'not' ) }
function Function ( ) { if (! this. isPlaying ( ) ) return ; this. stop_ ( true ) ; }
function Function ( ) { this. control ( { 'lap_berkas_jra button[action=print]' : { click : this. do_print_berkas_jra }, 'lap_berkas_jra button
function Function ( x ) { return ( typeof x == 'undefined' ) || ( x. toString ( ) === '' ) ; }
function Function ( context, settings ) { if ( $ ( '.field-name-field-basic-spotlight-items' ). length ) { var rotation_time = Drupal. settings. spotlight_settings. rotation_time ; $ (
function Function ( _, h, title ) { var slug = grunt. utils. _. slugify ( title. replace ( /\./g, '-' ) ) ; return h +'' + title +'<a name="
function Function ( event ) { if ( this. isDrawing ) { this. doDraw ( event ) ; } else { this. doSnap ( event ) ; } this. drawLastSnap ( ) ; }
function Function ( ) { editor. unload ( ) ; }
function fireVolumeChangeEvent Function ( ) { var evt = document. createEvent ( 'CustomEvent' ) ; evt. initCustomEvent ( 'volumechange', true, false, { currentVolume : currentVolume } ) ; window
function clear Function ( addScanningItem ) { while ( list. hasChildNodes ( ) ) list. removeChild ( list. lastChild ) ; if ( addScanningItem ) list. appendChild ( newScanItem ( ) )
function Function ( err, results ) { files. push ( node ) ; if ( err ) { doneProcessingNode ( err ) ; return ; } return doneProcessingNode ( null ) ; }
function Function ( e ) { appView. datumsView. newDatum ( ) ; app. router. showDashboard ( ) ; }
function Function ( index, element ) { chunk. fragments [ index ]. rect = element ; }
function Function ( ) { var el = $ ( this ) ; var seekid = el. data ( "seekid" ) ; C4. send ( "CANCEL_SEEK " + C4. padId ( seekid )
function Function ( err, fname ) { if ( path. basename ( fpath ) === fname ) { normalizeCall ( fpath, cb ) ; } }
function Function ( val ) { return /^[а-яіїєА-ЯІЇЄa-zA-Z\d\s\_\+\\\-\/\(\)\
function setStatus Function ( num, str ) { document. getElementById ( 'Status' ). value = str ; }
function Function ( state ) { var _ref1 ; return ( _ref1 = _this. dialog )!= null? _ref1. dialog ( "close" ) : void 0 ; }
function Function ( ) { if ( p. paused ( ) ) { p. play ( ) ; } else { p. pause ( ) ; } }
function Function ( a ) { typeof define == "function" && define. amd? define ( [ "jquery" ], a ) : jQuery &&! jQuery. fn. qtip && a ( jQuery ) }
function Function ( index, message ) { $ ( '#' + error. element ). parent ( ). append ( "<span class='errors sp-errors'>" + message + "</span>" ) ; }
function Function ( ) { _open ( "opening", 'local', request ) }
function Function ( exists ) { if ( exists === false ) { console. log ( "Activities store doesn't exist, creating it." ) ; store. save ( { key : "activities", options : { } } ) ; }
function Function ( ) { $ ( "#expense-type-select" ). append ( $ ( '<option>', { value : this. id } ). text ( this. displayedName ) ) ; parent. descriptions [ this
function Function ( event ) { if ( opts. onlyIf ( this ) ) { return fireCallback ( opts. callback, $ ( this ), event, false ) ; } }
function route Function ( handle, pathname ) { console. log ( "[INFO] About to route a request for " + pathname ) ; if ( typeof handle [ pathname ] === 'function' ) { handle [ pathname ] (
function post Function ( index ) { return this. data [ index ] ; }
function Function ( requestId, frameId, databaseName, opt_callback ) { var paramObject = {'requestId' : requestId, 'frameId' : frameId, 'databaseName' : databaseName, } ; chrome.
function Function ( ) { $. ajax ( { url : '/admin/check_list_availability', data : 'name=' + this. value, success : check_list_name_ok } ) ; }
function Function ( e ) { if ( this. suppressKeyPressRepeat ) return this. move ( e ) }
function onerror Function ( ) { if ( callback ) { callback ( null ) ; } window. setTimeout ( pendingMgr. deleteFromMsgDB ( msg, callback ). bind ( pendingMgr ), 500 ) ; }
function Function ( location, condition, opt_callback ) { var paramObject = { 'location' : location, 'condition' : condition, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Debugger.setBreak
function Function ( doc, req ) { return { title : 'Logbook Entry Deleted', content : templates. render ( 'logbook_deleted.html', req, { } ) } ; }
function Function ( ) { if ( req. readyState === 4 ) { var s = req. status ; callback (! s && req. response || s >= 200 && s < 300 || s === 304? req : null ) ; } }
function Function ( plugin_uri ) { var plugin = plugins [ plugin_uri ] if (! plugin ) { throw "PluginManagerError: plugin \"" + plugin_uri + "\" not found" } return plugin }
function Function ( err, req, data ) { if ( data ) { callback ( null, data ) ; } else { callback ( err ) ; } }
function Function ( ) { var enemy = en. enemy ; enemy. type ='slime' ; dd. enemies [ 0 ] = enemy ; dd. levelMap = dd. levelLoadMap ( 'level1' ) ; dd. sprite
function Function ( ) { return assertParse ( "identMacro 1", "lit 1" ) ; }
function finishTest Function ( ) { resetUnlimitedQuota ( ) ; resetIndexedDB ( ) ; SimpleTest. executeSoon ( function ( ) { testGenerator. close ( ) ; SimpleTest. finish ( ) ; } ) ;
function PromisedHandler Function ( ) { this. getSuggestions = function ( entry, callback ) { this. pendingSuggestion = { entry : entry, callback : callback } ; } ; this. $dispose = Aria. empty ;
function Function ( src ) { return activeSlide. add ( ComponentFactory. createImage ( _this. model. itemConfig ( src ) ) ) ; }
function Function ( success, data ) { sakai. api. Util. startup ( data ) ; sakai. api. i18n. init ( data ) ; }
function Function ( response ) { Mojo. Log. error ( JSON. stringify ( response ) ) if ( response. errorCode ) { this. controller. errorDialog ( response. errorText || "" ) ; } else { this. enable
function Function ( ) { return this. _server. getConstruct ( ) ; }
function Function ( texture, capacity ) { if (! capacity ) { capacity = cc. DEFAULT_SPRITE_BATCH_CAPACITY ; } var batchNode = new cc. SpriteBatchNode ( ) ; batchNode.
function Function ( ) { chrome. experimental. devtools. remoteDebug. registerEvent ( 'Runtime.isolatedContextCreated', [ 'context' ] ) ; chrome. experimental. devtools. remoteDebug. addDomainListener ( 'Runtime
function Function ( data ) { this. getRecommendedPicksStore ( ). loadRawData ( data ) ; }
function Function ( event, ui ) { $ ( '#search-box' ). val = ui. item. value ; search_term = ui. item. value ; changeHashTo ( formatSearch ( search_term,
function Function ( editor ) { align ( editor, "center" ) ; }
function Function ( d ) { if ( typeof origin === "function" ) arc. source ( origin. apply ( this, arguments ) ) ; return clipType ( d ) || null ; }
function Function ( err, collection ) { if ( err ) { self. conn. emit ( 'error', err ) ; } else { self. collection = collection ; Collection. prototype. onOpen. call ( self ) ; } }
function Function ( e ) { if ( expandable ) { expand_chart ( $ ( this. container ). parent ( ) ) ; } }
function Function ( node ) { if ( callback ) { callback ( results, true ) ; } }
function Function ( ) { if (! this. _debug_context ) window_manager. requestListWindows ( ) ; }
function Function ( ) { __g. isResizing = true ; __g. resizeDirection = "west" ; }
function Function ( v ) { db. tags. update ( { n : v. _id }, { $set : { c : v. value } }, true ) ; }
function Function ( view ) { this. insertView ( name, view ) ; }
function Function ( context ) { ok ( false, 'テスト失敗。__initが実行された' ) ; }
function Function ( page ) { page. app = this ; if ( this. theme ) { page. attributes [ 'data-theme' ] = this. theme ; } this. pages [ page. name ] = page ; }
function Function ( i ) { var node = commandKeys. getBookmark ( i ) ; if ( node ) { PlacesUIUtils. _openNodeIn ( node, "current", window ) ; } }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Debugger.stepOver', paramObject, opt_callback ) ; }
function Function ( ) { $ ( this. el ). html ( this. template ( ) ) ; this. renderCrust ( ) ; this. renderSauce ( ) ; this. renderCheese ( ) ; this. renderTo
function map Function ( func ) { return lexCons ( func ( this. head ( ) ), this. start ( ), this. tail ( ). map ( func ), this. end ( ) ) ; }
function Function ( ) { return this. attrs. width === 'auto'? this. getTextWidth ( ) + this. attrs. padding * 2 : this. attrs. width ; }
function Function ( ) { return ( 'htmlFor' in this )? this. htmlFor : this. getAttribute ( 'for' ) ; }
function Function ( ) { var delayFunc = jQuery. proxy ( this, "setPosition" ) ; clearTimeout ( window. TurnDelay ) ; window. TurnDelay = setTimeout ( delayFunc, 1000 ) ; }
function Function ( ) { this. get ( "el" ). on ( "keyup", this. handleKeyEventInternal, this ) ; this. publish ( "click", { bubbles : 1 } ) ; }
function Function ( ) { if ( window. chrome ) { return new ChromeTabWatcher ; } else if ( window. opera ) { return new OperaTabWatcher ; } else if ( window. jetpack ) { return new FirefoxJetpack
function create_play_button Function ( ) { var play = document. createElement ( 'div' ) ; play. setAttribute ( 'class', 'button play' ) ; return play ; }
function Function ( resource ) { return askbot ['settings' ] ['static_url' ] + 'default' + '/' + resource ; }
function Function ( actor, prevX ) { actor. x = prevX ; }
function Function ( e ) { return "" + ( e. attr ( 'data-chapter' ) ) + "/" + ( e. attr ( 'data-subchapter' ) ) + "/" + ( e. attr (
function expense_extension_triggerTSS Function ( ) { if ( $ ( '.ki_expenses' ). css ( 'display' ) == "block" ) { expense_extension_reload ( ) ; } else
function Function ( location ) { var deactivated = this. tiles [ location. join ( ',' ) ]. deactivate ( ) ; if ( deactivated ) { this. active_tiles -- ; } return deactivated ; }
function Function ( event, ui ) { if ( supports_local_storage ( ) ) { loadLocation ( $. mobile. pageData. id ) ; } else { } }
function Function ( ) { var col = this. col + 1 ; return this. matrix. get_cell ( this. row, col ) ; }
function Function ( ) { if ( this. _batchNode &&! this. _recursiveDirty ) { this. _recursiveDirty = true ; this. setDirty ( true ) ; if ( this. _hasChildren )
function Function ( data ) { console. log ( "fetched locale data for " + lang ) ; locale [ lang ] = data ; }
function Function ( rule ) { rule. isAllowed ( addOptions ( { url : 'http://hotmail.com', username : 'felix' } ), _w ( this. callback ) ) ; }
function Function ( ) { return new cc. Scene ( ) ; }
function Function ( name ) { this. set ( name,! this. get ( name ) ) ; }
function Function ( clicked ) { var textField = this. _pTrackNode ; if ( clicked ) { cc. log ( "TextFieldTTFDefaultTest:CCTextFieldTTF attachWithIME" ) ; textField. attachWith
function Function ( ) { var params = get_params ( ) ; if ( params. type == 'undelegated' ) { add_nameserver ( ) ; } else if ( tree_view ) { hide_results ( ) ;
function Function ( ) { __g. isResizing = true ; __g. resizeDirection = "north" ; }
function unwatch_FileEventEmitter Function ( ) { fs. unwatchFile ( this. path ) ; this. emit ( 'async-fs::file::stopped_watching', { path : this. path } ) ;
function Function ( ) { return window. game. refresh_canvas_position ( ) ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOM.hideHighlight', paramObject, opt_callback ) ; }
function processResult Function ( result, ast ) { return passed = showResult ( bx, Repl. escapeHtml ( Parse. print ( result ) ), Repl. escapeHtml ( test. result ) ) ; }
function deferredStop Function ( dfdStop ) { dfdStop. then ( function doneStop ( ) { self. signal ( "finalize", dfdFinalize ) ; }, dfdFinalize. reject, dfdFinalize
function Function ( panel, armed ) { var breakable = armed? "false" : "true" ; Firebug. chrome. setGlobalAttribute ( "cmd_firebug_toggleBreakOn", "breakable", breakable )
function Function ( d ) { var rw = this. getBBox ( ). width ; d3. select ( '#chart' ). selectAll ( '#' + getidname ( 'w_' + d. name
function Function ( $ ) { module ( "kitchen sink class test" ) ; asyncTest ( "Nothing on the page has a class that contains `undefined`.", function ( ) { var undefClass = $ ( ".ui-
function Function ( alpha_src, alpha_dst ) { return alpha_dst ; }
function Function ( ) { var elt = document. getElementById ( "grLine" + this. id ) ; elt. parentNode. removeChild ( elt ) ; graphicsArray [ this. id ] = undefined ; }
function Function ( status ) { equal ( status, "mustAuth", "mustAuth response expected" ) ; testHelpers. testEmailMarkedVerified ( "registered@testuser.com" ) ; ok (! storage. get
function Function ( ) { browserSocket. emit ( 'closedConnection', request. params. portNum, 'http' ) ; socketOpen [ request. params. portNum ] = false ; }
function Function ( ) { try { $ ( instance ). trigger ( "onReceived", [ this ] ) ; } catch ( e ) { log ( 'Error raising received'+ e ) ; } }
function Function ( buttonId ) { if ( buttonId == 'yes' ) { this. _removeUsers ( selectedUsers ) ; } }
function Function ( content ) { assert. strictEqual ( node. document. tree. documentElement. innerHTML, content. documentElement. innerHTML ) ; done ( ) ; }
function Function ( enabled ) { var changed = this. _enabled!== enabled ; this. _enabled = enabled ; if ( changed ) { $ ( this ). triggerHandler ( "enabledStateChange" ) ; } }
function Function ( ) { ok (! butter. cornfield. user ( ), "Username is \"\"" ) ; }
function Function ( level ) { _tip. debug = level ; }
function Function ( plan ) { var buildEvent = { buildName : plan. name, group : plan. projectName, url : plan. url } ; this. buildFailed. dispatch ( buildEvent ) ; }
function set_timer_interval Function ( interval ) { timer_interval = interval ; reset_timer ( ) ; }
function Function ( def ) { duckPunchRequire ( def. require ) ; return origExecuteDefFunc ( def ) ; }
function Function ( time ) { this. _target. setFlipX ( this. _flipX ) ; }
get doKindleImport Function ( ) { if ( typeof ( localStorage [ 'doKindleImport' ] ) == "undefined" ) { return false ; } else { return toBool ( localStorage [ 'doKindle
function Function ( ) { return ( Firebug. chrome. getGlobalAttribute ( "cmd_firebug_toggleProfiling", "checked" ) === "true" ) }
function Function ( ) { this. showView ( labsAboutView ) ; }
function adminPanel_extension_triggerCHE Function ( ) { if ( $ ( '.adminPanel_extension' ). css ( 'display' ) == "block" ) { adminPanel_extension_refreshSubtab
function processResult Function ( result ) { writeOutput ( "" + ( ReplCore. getType ( result ) ) + ": " + ( escape ( Parse. print ( result ) ) ) + "\n" ) ; return ReplCore.
function Function ( result ) { if ( result && typeof result. Errors!= "undefined" ) { callback ( new Error ( result. Errors. Error. Message ), result ) } else { callback ( null, result ) } }
function Function ( action ) { this. getActionManager ( ). removeAction ( action ) ; }
function Function ( ) { var panel = jQuery ( this ) ; panel. height ( pane_height ) ; panel. width ( pane_width ) ; }
function fireCallback Function ( callback, $el, event, touched ) { if ( typeof callback == 'function' ) return callback. call ( $el [ 0 ], event, touched ) ; }
function Function ( e ) { e = e ; if ( e. key == 'esc' && this. visible ) this. hide ( this. layout ) ; }
function Function ( that ) { that. locate ( "password" ). val ( "" ) ; }
function Function ( vm ) { this. _enableCsControls ( false, [ vm ] ) ; }
function Function ( ) { $ ( "#box" ). append ( $ ( "<div><i>Question timed out</i><div>" ) ) ; $ ( "#box" ). animate ( { scrollTop : $ ( "#box"
function Function ( xhr, textStatus, thrownError ) { if ( xhr. status === 1223 || xhr. status === 409 ) { ret = false ; } else { ret = true ; } if ( callback ) { callback (
function Function ( ) { render ( { 'upstream' : '/parameters/federation-upstream/' + esc ( this. params [ 'id' ] ) }, 'federation-upstream', '#/f
function Function ( ) { _this. server. responses = [ ] ; _this. server. respondWith ( 'GET', _this. url, TestResponses. chat. archived ) ; _this. server. respond ( )
function Function ( value ) { return balUtilTypes. isObject ( value ) && value. __proto__ === Object. prototype ; }
function start Function ( ) { console. log ( "[INFO] Request handler'start' was called." ) ; }
function Function ( divElem ) { if (! divElem. hasClassName ( 'highslide-header' ) ) { divElem. setStyle ( { 'height' : '100%' } ) ; } }
function Function ( ) { window. location. reload ( ) ; }
function closeClickHandler Function ( e ) { _internal. activity ( "default-close" ) ; closeButton. removeEventListener ( "click", closeClickHandler, false ) ; }
function Function ( error ) { self. log_error ( error ) ; stream. end ( ) ; }
function Function ( ) { expect ( 0 ) ; this. foo = "hamster" ; }
function Function ( err, obj ) { assert. isNull ( err ) ; assert. lengthOf ( obj. repository_ids, 2 ) ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'IndexedDB.enable', paramObject, opt_callback ) ; }
function Function ( value ) { return typeof value ==='string' || balUtilTypes. toString ( value ) === '[object String]' ; }
function Function ( url, opt_callback ) { var paramObject = { 'url' : url, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOMDebugger.removeXHRBreakpoint', paramObject
function Function ( ) { if ( settings. get ( 'debug' ) ) { window. vibe = self } if ( modal. hasDialogue ( throbberID ) ) { modal. close ( throbberID ) } }
function test Function ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL, "indexedDB" ) ; removePermission ( testPageURL, "indexedDB-
function Function ( nodeId, highlightConfig, opt_callback ) { var paramObject = { 'nodeId' : nodeId, 'highlightConfig' : highlightConfig, } ; chrome. experimental. devtools. remoteDebug. sendCommand
function Function ( ) { return "" ; }
function Function ( ) { return ( this. editor === this. source )? this. $editorTextarea. innerHeight ( ) : this. $editorIframe. outerHeight ( ) ; }
function Function ( curr, total ) { if ( hasTimedOut ) return ; debug ( 'task "%s" at progress %d/%d', task. get ( 'name' ), curr, total ) ; task
function Function ( ) { this. previewImageUrl = emptyGif ; $ ( '#kml-preview' ). attr ('src', emptyGif ) ; $ ( '#kml-preview-container
function Function ( section ) { if ( section ) { fields. push ( section. fields ) ; } }
function Function ( model, error ) { assert. equals ( [ 'Agree must be accepted' ], error ) ; done ( ) ; }
function Function ( err, value ) { if ( ERR ( err, callback ) ) return ; callback ( null, { lastEdited : value } ) ; }
function install Function ( ) { echo ( "Installing Deployd..." ) ; npm. commands. install ( [ 'https://github.com/deployd/deployd/tarball/master' ], finished ) ; }
function Function ( data ) { var toHTML = accelerometerAPI. formatDataForHTML ( data ) ; $ ( '#debug-accelerometer' ). html ( toHTML ) ; }
function Function ( worker ) { lastWorker = worker ; if ( ready ) worker. postMessage ( JSON. stringify ( ss. storage. h ) ) ; }
function passwordLength Function ( password ) { var valid = password && ( password. length >= bid. PASSWORD_MIN_LENGTH && password. length <= bid. PASSWORD_MAX_LENGTH ) ; if (! valid )
function Function ( ) { assert. deepEqual ( quadtree. decode ( '1310333011323110333011323110333011323110333011323111231111111111111111111111111111111111111111
function number Function ( n ) { if ( n!= null && typeof n == typeof 1 &&! isNaN ( n ) ) { return n ; } else { } }
function Function ( action ) { cc. Assert ( action!= null, "Argument must be non-nil" ) ; this. getActionManager ( ). addAction ( action, this,! this. _isRunning ) ; return
function Function ( options, callback ) { this. request ( { method : 'POST', path : '/_replicate', body : options }, callback ) ; }
function Function ( ) { window. location. reload ( true ) ; }
function Function ( ) { if ( cc. s_sharedAnimationCache == null ) { cc. s_sharedAnimationCache = new cc. AnimationCache ( ) ; cc. s_sharedAnimationCache. init ( ) ; } return cc.
function Function ( ) { this. getScheduler ( ). unscheduleUpdateForTarget ( this ) ; }
function Function ( ) { document. getElementById ( "GameCanvas" ). style. cursor = 'url(data/empty_cursor_flx.png), auto' ; }
function Function ( ) { if ( focusedOut && datePicker. not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker. trigger ( 'focusout' ) ; datePicker. triggerHandler ( 'bl
function Function ( ) { if (! this. length ) return ; fn. reach ( this, function ( item ) { item. parentNode. removeChild ( item ) ; } ) }
function handleOk Function ( fraseElement, autorElement ) { console. log ( "ok" ) }
function Function ( ) { module. filename. should. match ( /\/.*test\/module_spec.js/ ) ; }
function Function ( type ) { if ( this. _type!= null ) throw Error ( "type is already set" ) ; if ( type. equals ( Type. Type. integerType ) ) type = Type. Type. numberType ; this
function activeIfEquals Function ( name, testName ) { return name === testName? 'active' : '' ; }
function Function ( ) { this. control ( { 'berkas_jra_list' : { itemdblclick : this. list_itemdblclick, selectionchange : this. list_selectionchange } } ) }
function Function ( newVal ) { if ( arguments. length > 0 ) { boardLocked = newVal ; this. refreshBoard ( ) ; } return boardLocked ; }
function Function ( e ) { this. app. stopTransition = true ; var index = getIndexFromId ( e. target, "editList" ) ; this. deleteList = index ; deleteConfItem ( index ) ; }
function Function ( ) { showOnlyLayer ( this ) ; return false ; }
function Function ( ) { nate. attack ( ) ; }
function testCannotConfirm Function ( ) { testHelpers. testErrorVisible ( ) ; }
function Function ( ) { var oneJanStamp = Date. UTC ( this. getUTCFullYear ( ), 0, 1 ) ; return Math. floor ( ( this - oneJanStamp ) / 86400000 ) ; }
function Function ( index, row ) { $table. children ( 'tbody' ). append ( row ) row. sortText = null }
function mouseLeave Function ( ) { -- entered ; if ( entered == 0 ) { clearTimeout ( hideTimeout ) ; hideTimeout = setTimeout ( doHide, autoHideDelay ) ; } }
function Function ( $ ) { $. onedb = function ( selector ) { var active_dbs = $ ( ".databases input[type=checkbox]" ). not ( ":disabled" ) ; if ( active_d
function Function ( ) { joePrivate. getGlobalSuite ( ). exit ( ) ; if (! joe. hasExited ( ) ) { return joe. exit ( ) ; } }
function Function ( ) { if (! this. _actionManager ) this. _actionManager = cc. Director. sharedDirector ( ). getActionManager ( ) ; return this. _actionManager ; }
function Function ( opt_callback ) { var paramObject = { } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOM.getDocument', paramObject, opt_callback ) ; }
function Function ( _ ) { if (! arguments. length ) return precision / d3_geo_radians ; precision = _ * d3_geo_radians ; return greatArc ; }
function DefendOrder Function ( issuer ) { Order. call ( this, 'Defend', issuer ) ; this. execute = function ( ) { } ; }
function Function ( ) { Meteor. subscribe ( "bandnames" ) ; }
function Function ( ) { self. initSocket ( client, onConnect ) if ( opts. reconnect ) applyReconnect ( ) }
function Function ( e ) { Utils. debug ( 'Datalist save error' ) ; Utils. debug ( e ) ; hub. publish ( "saveFailedToPouch", "datalist" ) ; }
function Function ( ) { return playlist. getSongs ( ) ; }
function reallyDelete Function ( ) { var answer = confirm ( "Do you really want to delete this note?" ) if ( answer ) { deleteNote ( ) ; } else { } }
function Function ( index ) { return index % 5 === 0 ; }
function Function ( ) { return v. apply ( { scope : this, supr : orig, module : m }, arguments ) ; }
function Function ( ) { if ( this. _showingEmptyView ) { this. closeChildren ( ) ; delete this. _showingEmptyView ; } }
function Function ( ) { expect ( 1 ) ; stop ( ) ; ua. importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom
function Function ( cb ) { cb ( null, remote ) ; }
function Function ( scene ) { return scene. vars. item. label ; }
function Function ( ) { if ( wasApplied ) { Class. PrototypeMixin = Ember. Mixin. create ( Class. PrototypeMixin ) ; } wasApplied = false ; }
function Function ( exists ) { if ( exists === false ) { console. log ( "Activities store doesn't exist, creating it." ) ; store. save ( { key : "activities", options : { } } ) } }
function Function ( ) { methods. next. apply ( $this, [ settings. direction ] ) ; }
function Function ( title, uri ) { textileMode. replaceSelection ( editor, "\"" + title + "\":" + uri ) ; }
function maxY Function ( ) { return chart. group ( ). top ( 1 ) [ 0 ]. value ; }
function Function ( request, sender, sendResponse ) { if ( request == "refreshSettings" ) { chrome. extension. sendMessage ( null, 'getSettings', chromeHandleMessage ) ; } }
function Function ( ) { options. logger. log ( "assedDownload timeout...retry" ) ; fetchFileAndFinish ( ) ; }
function Function ( t, record ) { if ( record. self. getName ( ) == "PartKeepr.Footprint" ) { this. fireEvent ( "itemEdit", record. get ( "id" ) ) ; }
function Function ( ) { self. emit ( 'error', ex ) ; }
function clearLoadingStatus Function ( ) { }
function share Function ( name, prop ) { this. proto [ name ] = prop ; }
function Function ( sender ) { this. _disabledItem. setEnabled (! this. _disabledItem. isEnabled ( ) ) ; this. _disabledItem. stopAllActions ( ) ; }
function Function ( name, testEnvironment ) { config. currentModule = name ; config. currentModuleTestEnviroment = testEnvironment ; }
function Function ( ) { $. mobile. pushStateEnabled = false ; $. mobile. hashListeningEnabled = false ; debug ( "mobile init" ) ; $ ( document ). delegate ( 'div', "pageshow",
function al_putAlarmList Function ( alarm ) { AlarmManager. setEnabled ( alarm, alarm. enabled ) ; AlarmList. refresh ( ) ; }
function Function ( ) { assert. ok ( subject. connection ) ; assert. ok ( subject. isOpen ) ; assert. equal ( subject. connection. name, name ) ; finishedOpen = true ; }
function Function ( d ) { __g. canMove = false ; }
function Function ( ) { this. _rootAABB. compute ( this. _rect, this. concatedMatrix ) ; return this. _rootAABB ; }
function Function ( ) { updateDashboard ( ) ; }
function Function ( user ) { this. serverGame. userIdLeft ( user. id ) ; this. sendCommandToAllUsersExcept ( "userLeft", user. id, user ) ; delete this. users [ user. id ]
function Function ( ) { cc. log ( "add effects volume" ) ; cc. AudioEngine. getInstance ( ). setEffectsVolume ( cc. AudioEngine. getInstance ( ). getEffectsVolume ( ) + 0.1 )
function Function ( editor, callback ) { return editor. getDataMode ( ). toText ( editor, callback ) ; }
function Function ( error, json ) { if (! error ) { callback ( null, json ) ; } else { callback ( error ) ; } }
function Function ( vector ) { return Math. sqrt ( vector. x * vector. x + vector. y * vector. y ) ; }
function Function ( frameId, url, opt_callback ) { var paramObject = { 'frameId' : frameId, 'url' : url, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Page.
function Function ( aState, str ) { check ( aState, str, isString,'string->symbol','string', 1 ) ; aState. v = types. symbol ( str. toString ( ) ) ;
function Function ( ) { return this. find ( '.treedropdownfield-panel' ) ; }
function Function ( databaseId, query, opt_callback ) { var paramObject = { 'databaseId' : databaseId, 'query' : query, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'Database.
function Function ( paramName ) { return ( this. queryData_. get ( paramName ) ) ; }
function Function ( scene ) { return options. showValuePercentage? scene. vars. value. percent : scene. vars. value ; }
function Function ( ) { $ ( '#new_event_submit' ). click ( function ( ) { addDuration ( ) ; } ) ; }
function Function ( item ) { users_data [ item. username ] = item ; insert_user_into_list ( item, '#users-list' ) ; }
function Function ( val ) { var _ = this. _ ; if ( typeof val === "number" ) { _. attack = val ; set_params. call ( this, _. ratio, _. attack, _. release )
function Function ( storageId, key, opt_callback ) { var paramObject = {'storageId' : storageId, 'key' : key, } ; chrome. experimental. devtools. remoteDebug. sendCommand ( 'DOMStorage
function px Function ( n ) { return n + 'px' ; }
function Function ( config, tension, segments ) { cc. log ( "DrawingPrimitive.drawCardinalSpline() not implement!" ) ; }
function onLoad Function ( ) { console. log ( "purplePanel load event" ) ; setTimeout ( loadJSAsync ) ; }
function Function ( worker ) { debug ( 'kill worker'+ worker. pid ) worker. kill ( ) }
function Function ( dt ) { cc. log ( "tick1" ) ; }
function Function ( e ) { confirm_action ( "рекомендовать сообщение #" + message_id, function ( ) { api_call_
function Function ( ) { return this. body. _rev ; }
function Function ( ) { this. getScheduler ( ). pauseTarget ( this ) ; this. getActionManager ( ). pauseTarget ( this ) ; }
function Function ( err ) { if ( err ) { self. error ( err, callback ) ; } else { self. onClose ( ) ; callback && callback ( ) ; } }
function Function ( ) { this. _attributes = { } ; this. delete ( ) ; this. fireEvent ( 'destroy' ) ; }
function Function ( data ) { opts = data ; }
function Function ( evt ) { return this. _mouseDownOrTouchStart ( evt ) ; }
function Function ( transform ) { var style = this. map. layerContainerDiv. style ; var transformProperty = OpenLayers. Util. getVendorPrefixedDom ( "transform" ) ; if ( transformProperty ) { style [
function Function ( f ) { transfer = uploadManager. upload ( Object [ append ] ( { }, op ) ) ; if ( transfer ) transfer. load ( f ) }
function Function ( ) { $ ( "#submitButton" ). removeAttr ( "disabled" ) ; $. mobile. changePage ( "#my-friends" ) ; }
function setup Function ( ) { sinon. config. useFakeTimers = false ; }
function Function ( pZone ) { var newFrame = new cc. AnimationFrame ( ) ; newFrame. initWithSpriteFrame ( this. _spriteFrame, this. _delayPerUnit, this. _userInfo ) ; return
function Function ( id ) { return this. _currentLanguage. labels [ id ] ; }
function Function ( topic ) { var view = new app. View. TopicView ( { model : topic } ) ; self. $topics. append ( view. $el ) ; }
function Function ( ) { var script = builder. io. loadNewScriptForSuite ( ) ; if ( script ) { builder. suite. addScript ( script ) ; builder. gui. menu. updateRunSuiteOnRC ( )
function Function ( value ) { if ( this. dScaleY == value ) return this ; this. dScaleY = parseFloat ( value ) ; this. staticMatrix = null ; this. scaleMatrix = null ; this. updateMatrix (
function executeInitializers Function ( ) { return sequence ( contextHandlers. init, context ) ; }
function Function ( ) { return this. scene. vars. percentil5. position ; }
function Function ( v, inst ) { input. val ( v ) ; elm. val ( inst. values [ 0 ] ). trigger ( 'change' ) ; }
function Function ( absId, require, loaded, config ) { require ( [ absId ], loaded, loaded. error ) ; }
function _markMostRecent Function ( doc ) { var mruI = findInWorkingSet ( doc. file. fullPath, _workingSetMRUOrder ) ; if ( mruI!== - 1 ) { _workingSetMR
function Function ( ) { this. minZBuffer2 = minZBuffer2 ; this. color = color ; }
function Function ( jStat ) { assert. deepEqual ( jStat ( [ [ 1, 2 ], [ 1, 4 ] ] ). mode ( ), [ 1, [ 2, 4 ] ] ) ; }
function Function ( ) { var data = $ ( this ). data ('slider' ) ; if ( data ) values. push ( data. value ) ; }
function Function ( txt ) { if (! wn. md2html ) { wn. require ( 'js/lib/showdown.js' ) ; wn. md2html = new Showdown. converter ( ) ; }
function Function ( req, res ) { renderCachableView ( req, res, 'privacy.ejs', { title : _ ( 'Privacy Policy' ), fullpage : false } ) ; }
function Function ( ) { expect ( 1 ) ; stop ( ) ; ua. importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom
function attemptMergeWithNext Function ( e, allowDifferentListStyles, mergeParagraphs ) { var next = skipWhitespaceNodesForwards ( e. nextSibling ) ; if ( next ) { return attemptMerge
function Function ( val ) { var _ = this. _ ; if ( typeof val === "number" ) { _. wet = val ; set_params. call ( this, _. time, _. fb, _. wet
